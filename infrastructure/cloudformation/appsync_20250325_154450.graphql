"""
Base GraphQL schema.
Generated at .

This schema follows these conventions:
- Type names: PascalCase (e.g., ApplicationRole)
- Field names: camelCase (e.g., applicationId)
- Input types: PascalCase with Input suffix (e.g., ApplicationRoleInput)
- Response types: PascalCase with Response suffix (e.g., ApplicationRoleResponse)
- List response types: PascalCase with ListResponse suffix (e.g., ApplicationRoleListResponse)
- Query operations: camelCase with Query suffix (e.g., applicationRoleQuery)
- Mutation operations: camelCase with action suffix (e.g., applicationRoleCreate)

All operations are secured with AWS Cognito user pool authentication for the admin group.
"""

# Enums
enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserGroups {
  ADMIN
  USER
}

enum ApplicationEnvironments {
  DEV
  STAGING
  PROD
}

# Base types
type Query {
  ping: String
}

type Mutation {
  ping: String
}

# Model types
type Applications {
  applicationId: String!
  name: String!
  description: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
  userId: String!
}

input ApplicationsCreateInput {
  applicationId: String!
  name: String!
  description: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
  userId: String!
}

input ApplicationsUpdateInput {
  applicationId: String  name: String  description: String  status: String  createdAt: Int  updatedAt: Int  userId: String}

input ApplicationsQueryInput {
  applicationId: String!
}

type ApplicationsResponse {
  statusCode: Int!
  message: String!
  data: Applications
}

type ApplicationsListResponse {
  statusCode: Int!
  message: String!
  data: [Applications]
}

type Applicationroles {
  applicationId: String!
  roleId: String!
  description: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input ApplicationrolesCreateInput {
  applicationId: String!
  roleId: String!
  description: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input ApplicationrolesUpdateInput {
  applicationId: String  roleId: String  description: String  status: String  createdAt: Int  updatedAt: Int}

input ApplicationrolesQueryInput {
  applicationId: String!
  roleId: String
}

type ApplicationrolesResponse {
  statusCode: Int!
  message: String!
  data: Applicationroles
}

type ApplicationrolesListResponse {
  statusCode: Int!
  message: String!
  data: [Applicationroles]
}

type Applicationusers {
  applicationId: String!
  userId: String!
  roleId: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input ApplicationusersCreateInput {
  applicationId: String!
  userId: String!
  roleId: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input ApplicationusersUpdateInput {
  applicationId: String  userId: String  roleId: String  status: String  createdAt: Int  updatedAt: Int}

input ApplicationusersQueryInput {
  applicationId: String!
  userId: String
}

type ApplicationusersResponse {
  statusCode: Int!
  message: String!
  data: Applicationusers
}

type ApplicationusersListResponse {
  statusCode: Int!
  message: String!
  data: [Applicationusers]
}

type Roles {
  roleId: String!
  userId: String!
  applicationId: String!
  roleName: String!
  roleType: String!
  permissions: String!
  createdAt: Int!
  updatedAt: Int!
  active: String!
}

input RolesCreateInput {
  roleId: String!
  userId: String!
  applicationId: String!
  roleName: String!
  roleType: String!
  permissions: String!
  createdAt: Int!
  updatedAt: Int!
  active: String!
}

input RolesUpdateInput {
  roleId: String  userId: String  applicationId: String  roleName: String  roleType: String  permissions: String  createdAt: Int  updatedAt: Int  active: String}

input RolesQueryInput {
  roleId: String!
  applicationId: String
}

type RolesResponse {
  statusCode: Int!
  message: String!
  data: Roles
}

type RolesListResponse {
  statusCode: Int!
  message: String!
  data: [Roles]
}

type Users {
  userId: String!
  cognitoId: String!
  email: String!
  phoneNumber: String!
  phoneVerified: String!
  firstName: String!
  lastName: String!
  groups: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input UsersCreateInput {
  userId: String!
  cognitoId: String!
  email: String!
  phoneNumber: String!
  phoneVerified: String!
  firstName: String!
  lastName: String!
  groups: String!
  status: String!
  createdAt: Int!
  updatedAt: Int!
}

input UsersUpdateInput {
  userId: String  cognitoId: String  email: String  phoneNumber: String  phoneVerified: String  firstName: String  lastName: String  groups: String  status: String  createdAt: Int  updatedAt: Int}

input UsersQueryInput {
  userId: String!
}

type UsersResponse {
  statusCode: Int!
  message: String!
  data: Users
}

type UsersListResponse {
  statusCode: Int!
  message: String!
  data: [Users]
}


# Query operations
extend type Query {
  ApplicationsQueryById(id: ID!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationsQuery(input: ApplicationsQueryInput): ApplicationsListResponse
    @aws_auth(cognito_groups: ["admin"])
  ApplicationRolesQueryById(id: ID!): ApplicationrolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationRolesQuery(input: ApplicationrolesQueryInput): ApplicationrolesListResponse
    @aws_auth(cognito_groups: ["admin"])
  ApplicationUsersQueryById(id: ID!): ApplicationusersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationUsersQuery(input: ApplicationusersQueryInput): ApplicationusersListResponse
    @aws_auth(cognito_groups: ["admin"])
  RolesQueryById(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  RolesQuery(input: RolesQueryInput): RolesListResponse
    @aws_auth(cognito_groups: ["admin"])
  UsersQueryById(id: ID!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  UsersQuery(input: UsersQueryInput): UsersListResponse
    @aws_auth(cognito_groups: ["admin"])
}

# Mutation operations
extend type Mutation {
  ApplicationsCreate(input: ApplicationsCreateInput!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationsUpdate(id: ID!, input: ApplicationsUpdateInput!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationsDelete(id: ID!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  ApplicationRolesCreate(input: ApplicationrolesCreateInput!): ApplicationrolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationRolesUpdate(id: ID!, input: ApplicationrolesUpdateInput!): ApplicationrolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationRolesDelete(id: ID!): ApplicationrolesResponse
    @aws_auth(cognito_groups: ["admin"])
  ApplicationUsersCreate(input: ApplicationusersCreateInput!): ApplicationusersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationUsersUpdate(id: ID!, input: ApplicationusersUpdateInput!): ApplicationusersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  ApplicationUsersDelete(id: ID!): ApplicationusersResponse
    @aws_auth(cognito_groups: ["admin"])
  RolesCreate(input: RolesCreateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  RolesUpdate(id: ID!, input: RolesUpdateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  RolesDelete(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  UsersCreate(input: UsersCreateInput!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  UsersUpdate(id: ID!, input: UsersUpdateInput!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  UsersDelete(id: ID!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
}