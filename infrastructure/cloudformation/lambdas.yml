# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - Lambda Stack

# --------------------------------------------------- #
Parameters:
  ApplicationLoggingLevel:
    Default: DEBUG
    Type: String
  Environment:
    Default: dev
    Type: String
  LogFormat:
    Default: JSON
    Type: String
  NotificationEmail:
    Default: models@oneredboot.com
    Description: The email address for notifications
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  Runtime:
    Default: python3.13
    Type: String
  SystemLoggingLevel:
    Default: WARN
    Type: String
  ToEmail:
    Default: corey@shabot.ca
    Description: The email address to send contact form submissions to
    Type: String
  SMSOriginationNumber:
    Type: String
    Description: The AWS SNS origination number for sending SMS messages


# --------------------------------------------------- #
Globals:
  Function:
    DeadLetterQueue:
      TargetArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'
      Type: SNS
    Environment:
      Variables:
        ALERTS_QUEUE: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'
        LOGGING_LEVEL: INFO
        VERSION: 1
    Handler: index.lambda_handler
    MemorySize: 256
    Runtime: !Ref Runtime
    Tags:
      Billable: true
      CustomerId: !Ref CustomerId
      Environment: !Ref Environment
      ProjectId: !Ref ProjectId
    Timeout: 30

# --------------------------------------------------- #
Resources:

  # IAM Roles
  # The LambdaExecutionRole is used by Lambda functions to execute and access necessary AWS services.
  # It includes managed policies for basic execution and custom policies for accessing DynamoDB, Secrets Manager, SSM, CloudWatch, SQS, and SES.
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CloudWatchLoggingPolicy
        - !Ref ParameterStorePolicy
        - !Ref QueueStorePolicy
        - !Ref SecretsManagerPolicy
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-arn}}'
        - PolicyName: DynamoDBStreamAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource:
                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-stream-arn}}'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${CustomerId}-${ProjectId}-${Environment}-*'
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CustomerId}-${ProjectId}-${Environment}-*'
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CustomerId}-${ProjectId}-${Environment}-*'
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'
                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
        - PolicyName: CongnitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminRemoveUserFromGroup
                - cognito-idp:AdminListGroupsForUser
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsersInGroup
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
        - PolicyName: LambdaEventAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:GetEventSourceMapping
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*"
  # IAM Policies
  # CloudWatchLoggingPolicy: Allows logging to CloudWatch for monitoring and debugging.
  CloudWatchLoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cloudwatch-access-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - "arn:aws:logs:*:*:*"

  # ParameterStorePolicy: Grants access to SSM Parameter Store for configuration management.
  ParameterStorePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-parameter-store-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "ssm:GetParameter"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter//${CustomerId}/${ProjectId}/${Environment}/*"

  # QueueStorePolicy: Provides access to SQS and SNS for message queuing and notifications.
  QueueStorePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-queue-store-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:*"
              - "sns:*"
            Resource:
              - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'
              - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'
              - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-phone-number-verification-topic-arn}}'

  SecretsManagerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-secrets-manager-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${CustomerId}/${ProjectId}/${Environment}/*"

  # SMS Verification Lambda
  SmsVerificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${CustomerId}-${ProjectId}-${Environment}-sms-verification'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ../../backend/src/lambdas/sms_verification/
      Environment:
        Variables:
          SMS_ORIGINATION_NUMBER: !Ref SMSOriginationNumber
          SMS_VERIFICATION_SECRET_NAME: !Sub '${CustomerId}-${ProjectId}-${Environment}-sms-verification-secret'

  # Cognito Group Manager Lambda
  CognitoGroupManagerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-group-manager"
      Description: "Lambda function to manage Cognito User Pool groups"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ../../backend/src/lambdas/cognito_group_manager/

  # User Status Calculator Lambda (DynamoDB Stream Trigger)
  UserStatusCalculatorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${CustomerId}-${ProjectId}-${Environment}-user-status-calculator"
      Description: "Lambda function triggered by DynamoDB streams to automatically calculate user status"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ../../backend/src/lambdas/user_status_calculator/
      Environment:
        Variables:
          USER_POOL_ID: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id}}'
          USERS_TABLE_NAME: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-name}}'
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-stream-arn}}'
            StartingPosition: LATEST
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

  # SSM Parameters

  # Parameter Store for the Cognito Group Manager Lambda ARN
  CognitoGroupManagerLambdaArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-group-manager-lambda-arn"
      Type: String
      Value: !GetAtt CognitoGroupManagerLambda.Arn

  # Paramter Store for the SMS Verification Lambda ARN
  SmsVerificationLambdaArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-sms-verification-lambda-arn"
      Type: String
      Value: !GetAtt SmsVerificationLambda.Arn

  # Parameter Store for the User Status Calculator Lambda ARN
  UserStatusCalculatorLambdaArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-user-status-calculator-lambda-arn"
      Type: String
      Value: !GetAtt UserStatusCalculatorLambda.Arn

  # Paramter Store for the SMS Origination Number
  SMSOriginationNumberParemeter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-sms-origination-number"
      Type: String
      Value: !Ref SMSOriginationNumber

# --------------------------------------------------- #
Outputs:
  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn

