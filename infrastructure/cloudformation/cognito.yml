# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - Cognito Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  ExpirationInDays:
    Default: 14
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String

# --------------------------------------------------- #
Globals:
  Function:
    DeadLetterQueue:
      TargetArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'
      Type: SNS
    Environment:
      Variables:
        ALERTS_QUEUE: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'
        LOGGING_LEVEL: INFO
        VERSION: 1
    Handler: index.lambda_handler
    MemorySize: 256
    Runtime: python3.12
    Tags:
      Billable: true
      CustomerId: !Ref CustomerId
      Environment: !Ref Environment
      ProjectId: !Ref ProjectId
    Timeout: 30

# --------------------------------------------------- #
Resources:
  # User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: !Sub |
            Your account for ${CustomerId}-${ProjectId}-${Environment} has been created.
            Your username is {username} and temporary password is {####}.
            Please login from here: https://ai-repository.oneredboot.com/authenticate/
          EmailSubject: !Sub |
            Your temporary password for ${CustomerId}-${ProjectId}-${Environment}
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostUserConfirmationTrigger.Arn
      MfaConfiguration: 'ON'
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      SmsAuthenticationMessage: 'Your authentication code is {####}'
      EnabledMfas:
        - 'SOFTWARE_TOKEN_MFA'
        - 'SMS_MFA'
      UserPoolName: !Sub "${CustomerId}-${ProjectId}-${Environment}-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: false
      SmsConfiguration:
        ExternalId: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-sms"
        SnsCallerArn: !GetAtt CognitoSMSRole.Arn
        SnsRegion: !Ref AWS::Region

  # Define Cognito Groups
  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: User
      UserPoolId: !Ref UserPool
      Description: Base group for all users

  CustomerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Customer
      UserPoolId: !Ref UserPool
      Description: Group for end-users making purchases

  ClientGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Client
      UserPoolId: !Ref UserPool
      Description: Group for customers using the integration hub service

  EmployeesGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Employees
      UserPoolId: !Ref UserPool
      Description: Group for internal staff

  OwnerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Owner
      UserPoolId: !Ref UserPool
      Description: Group for root-level system access

  # Identity Pool
  IdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      IdentityPoolName: !Sub "${CustomerId}-${ProjectId}-${Environment}-identity-pool"
    Type: AWS::Cognito::IdentityPool

  IdentityPoolRoles:
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthorizedRole.Arn
      RoleMappings:
        UserPool:
          IdentityProvider: !Join
            - ""
            - - !Sub "cognito-idp.${AWS::Region}.amazonaws.com/"
              - !Ref UserPool
              - ":"
              - !Ref UserPoolClient
          AmbiguousRoleResolution: AuthenticatedRole
          Type: Token
    Type: AWS::Cognito::IdentityPoolRoleAttachment

  UserPoolClient:
    Properties:
      ClientName: !Sub "${CustomerId}-${ProjectId}-${Environment}-user-pool-client"
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolClient

  # Confirmation Trigger
  PostUserConfirmationTrigger:
    Properties:
      Description: Watches for new user created and assigns a default user group
      FunctionName: !Sub "${CustomerId}-${ProjectId}-${Environment}-PostUserConfirmationTrigger"
      InlineCode: |
        import json
        import boto3
        
        client = boto3.client('cognito-idp')
        
        def lambda_handler(event, context):
            print("Event received:", json.dumps(event))
        
            if 'userName' not in event or event['userName'] is None:
                raise ValueError('userName is required')
        
            if 'userPoolId' not in event or event['userPoolId'] is None:
                raise ValueError('userPoolId is required')
        
            try:
                client.admin_add_user_to_group(
                    UserPoolId=event['userPoolId'],
                    Username=event['userName'],
                    GroupName='User'
                )
                print(f"User {event['userName']} added to User group")
                return event
            except Exception as e:
                print(f"Error adding user to group: {str(e)}")
                raise
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
                - sqs:SendMessage
              Resource: '*'
    Type: AWS::Serverless::Function

  PostUserConfirmationTriggerPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostUserConfirmationTrigger.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
    Type: AWS::Lambda::Permission

  # IAM Roles
  # The CognitoLambdaRole is used by Lambda functions associated with Cognito for executing and accessing necessary AWS services.
  # It includes managed policies for basic execution and custom policies for accessing SNS for sending SMS notifications.

  # IAM Policies
  # CognitoSMSPolicy: Allows publishing messages to SNS for sending SMS notifications.

  AuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: !Sub "${CustomerId}-${ProjectId}-authorized-cognito-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
        - PolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-authorized-bucket-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${CognitoLogsBucket}/*"
      RoleName: !Sub "${CustomerId}-${ProjectId}-${Environment}-authorized-role"
    Type: AWS::IAM::Role

  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-sms-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-sms"
      Policies:
        - PolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-sms-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:CreateTopic
                  - sns:SetTopicAttributes
                  - sns:GetTopicAttributes
                Resource: !Ref SMSVerificationCodeTopic
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:ConfirmSubscription
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AWSXrayWriteOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: "*"

  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-lambda-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudfront:CreateInvalidation
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - cloudformation:DescribeStacks
                Effect: Allow
                Resource: '*'
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource: '*'
      RoleName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-lambda-role"
    Type: AWS::IAM::Role

  # SNS / SMS Verification Topic
  SMSVerificationCodeTopic:
    Properties:
      TopicName: !Sub "${CustomerId}-${ProjectId}-${Environment}-phone-number-verification"
      DisplayName: !Sub "${CustomerId}-${ProjectId}-${Environment}-phone-number-verification"
    Type: AWS::SNS::Topic

  SMSVerificationCodeTopicParameter:
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-phone-number-verification-topic-arn"
      Type: String
      Value: !Ref SMSVerificationCodeTopic
      Description: SMS Verification Code Topic ARN
      Tags:
        Billable: true
        CustomerId: !Ref CustomerId
        Environment: !Ref Environment
        ProjectId: !Ref ProjectId
    Type: AWS::SSM::Parameter

  # Parameter Store
  UserPoolIdParameter:
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
      Type: String
      Value: !Ref UserPool
      Description: UserPoolId
      Tags:
        Billable: true
        CustomerId: !Ref CustomerId
        Environment: !Ref Environment
        ProjectId: !Ref ProjectId
    Type: AWS::SSM::Parameter

  # S3
  CognitoLogsBucket:
    Properties:
      BucketName: !Sub "${CustomerId}-${ProjectId}-${Environment}-cognito-logs"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !Ref ExpirationInDays
            Id: !Sub "${CustomerId}-${ProjectId}-${Environment}-lifecycle-rule"
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: Billable
          Value: "true"
        - Key: CustomerId
          Value: !Ref CustomerId
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectId
          Value: !Ref ProjectId
    Type: AWS::S3::Bucket
