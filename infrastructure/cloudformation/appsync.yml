# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CustomerId}-${ProjectId}-${Environment}-*'

  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-graphql-api-key'
      Description: "GraphQL API Key for frontend authentication"
      SecretString: !Sub |
        {
          "api_key": "${IntegrationHubApiKey}",
          "description": "GraphQL API key for frontend access"
        }

  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub 's3://${CustomerId}-${ProjectId}-build-templates/${SchemaS3Key}'

  IntegrationHubApiId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id
      Type: String
      Value: !GetAtt IntegrationHubApi.ApiId

  GraphqlApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-graphql-api-url"
      Type: String
      Value: !GetAtt IntegrationHubApi.GraphQLUrl
      Description: "GraphQL API URL for frontend API calls"
      Tags:
        Billable: "true"
        CustomerId: !Ref CustomerId
        Environment: !Ref Environment
        ProjectId: !Ref ProjectId

  # DynamoDB DataSources
  # Jinja template for AppSync DynamoDB DataSources
  ApplicationUsersDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationUsersDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-users-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  ApplicationRolesDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationRolesDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-roles-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  RolesDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: RolesDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-roles-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  ApplicationsDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationsDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-applications-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  UsersDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: UsersDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
 
  # Lambda DataSources
  # Jinja template for AppSync Lambda DataSources
  SmsVerificationLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: SmsVerificationLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-sms-verification-lambda-arn}}'
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
 
  # DynamoDB Resolvers
  ApplicationUsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersCreate
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersUpdate
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationUserId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDelete
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDisable
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationUserId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByApplicationUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByApplicationUserId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationUserId = :applicationUserId",
            "expressionValues": {
              ":applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByUserIdAndApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByUserIdAndApplicationId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserAppIndex",
          "query": {
            "expression": "userId = :userId AND applicationId = :applicationId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByApplicationIdAndUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationUsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByApplicationIdAndUserId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "AppUserIndex",
          "query": {
            "expression": "applicationId = :applicationId AND userId = :userId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId),
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesCreate
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesUpdate
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationRoleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDelete
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDisable
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationRoleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByApplicationRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByApplicationRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationRoleId = :applicationRoleId",
            "expressionValues": {
              ":applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByUserIdAndRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByUserIdAndRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId AND roleId = :roleId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByApplicationIdAndRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByApplicationIdAndRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "ApplicationRoleIndex",
          "query": {
            "expression": "applicationId = :applicationId AND roleId = :roleId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId),
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByRoleIdAndRoleTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationRolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByRoleIdAndRoleType
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "RoleTypeIndex",
          "query": {
            "expression": "roleId = :roleId AND roleType = :roleType",
            "expressionValues": {
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId),
              ":roleType": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleType)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesCreate
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesUpdate
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "roleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDelete
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDisable
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "roleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesQueryByRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQueryByRoleId
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "roleId = :roleId",
            "expressionValues": {
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesQueryByUserIdAndRoleTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: RolesDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQueryByUserIdAndRoleType
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId AND roleType = :roleType",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":roleType": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleType)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationsDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsCreate
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationsDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsUpdate
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationsDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDelete
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationsDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDisable
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsQueryByApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApplicationsDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationsQueryByApplicationId
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationId = :applicationId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersCreate
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersUpdate
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDelete
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDisable
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByUserId
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByEmailResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByEmail
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "EmailIndex",
          "query": {
            "expression": "email = :email",
            "expressionValues": {
              ":email": $util.dynamodb.toDynamoDBJson($ctx.args.input.email)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByCognitoIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByCognitoId
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "CognitoIdIndex",
          "query": {
            "expression": "cognitoId = :cognitoId",
            "expressionValues": {
              ":cognitoId": $util.dynamodb.toDynamoDBJson($ctx.args.input.cognitoId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByCognitoSubResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: UsersDynamoDbDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByCognitoSub
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "CognitoSubIndex",
          "query": {
            "expression": "cognitoSub = :cognitoSub",
            "expressionValues": {
              ":cognitoSub": $util.dynamodb.toDynamoDBJson($ctx.args.input.cognitoSub)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
 
  # Lambda Resolvers
  SmsVerificationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SmsVerificationLambdaDataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation  # or Query, adjust as needed
      FieldName: SmsVerification  # or the actual field name
      DataSourceName: SmsVerificationLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx.args)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
 
# --------------------------------------------------- #
Outputs:
  IntegrationHubApiId:
    Description: The ID of the AppSync API
    Value: !GetAtt IntegrationHubApi.ApiId
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id

  IntegrationHubApiEndpoint:
    Description: The endpoint URL of the AppSync API
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-endpoint 