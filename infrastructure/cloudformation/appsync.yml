# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  # IAM Roles for AppSync
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
  
  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync-graphql-key'
      Description: "AppSync API Key for unauthenticated access"
      SecretString: !GetAtt IntegrationHubApiKey.ApiKey

  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub 's3://${CustomerId}-${ProjectId}-build-templates/${SchemaS3Key}'

  # Data Sources
  # --------------------------------------------------- #
  # DynamoDB CRUD Lambda Data Source (imported from lambdas.yml)
  DynamoDbCrudLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: DynamoDbCrudLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !ImportValue DynamoDbCrudLambdaArn
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  # Table Data Sources and Resolvers
  
    # ApplicationRoles Table-specific resources (must be inside the loop)
    # TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-application-roles'
    # (Move any other schema-specific resources here)
    # ...
  
    # Applications Table-specific resources (must be inside the loop)
    # TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-applications'
    # (Move any other schema-specific resources here)
    # ...
  
    # ApplicationUsers Table-specific resources (must be inside the loop)
    # TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-application-users'
    # (Move any other schema-specific resources here)
    # ...
  
    # Roles Table-specific resources (must be inside the loop)
    # TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-roles'
    # (Move any other schema-specific resources here)
    # ...
  
    # Users Table-specific resources (must be inside the loop)
    # TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-users'
    # (Move any other schema-specific resources here)
    # ...
  

  # CRUD/Disable resolvers for each table
  
    # ApplicationRoles Lambda CRUD/Disable Resolvers
    
      ApplicationRolesCreateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationRolesCreate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationRolesCreate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationRolesUpdateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationRolesUpdate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationRolesUpdate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationRolesDeleteResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationRolesDelete
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationRolesDelete",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationRolesDisableResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationRolesDisable
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationRolesDisable",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
  
    # Applications Lambda CRUD/Disable Resolvers
    
      ApplicationsCreateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationsCreate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationsCreate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationsUpdateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationsUpdate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationsUpdate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationsDeleteResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationsDelete
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationsDelete",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationsDisableResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationsDisable
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationsDisable",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
  
    # ApplicationUsers Lambda CRUD/Disable Resolvers
    
      ApplicationUsersCreateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationUsersCreate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationUsersCreate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationUsersUpdateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationUsersUpdate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationUsersUpdate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationUsersDeleteResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationUsersDelete
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationUsersDelete",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      ApplicationUsersDisableResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: ApplicationUsersDisable
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "ApplicationUsersDisable",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
  
    # Roles Lambda CRUD/Disable Resolvers
    
      RolesCreateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: RolesCreate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "RolesCreate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      RolesUpdateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: RolesUpdate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "RolesUpdate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      RolesDeleteResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: RolesDelete
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "RolesDelete",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      RolesDisableResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: RolesDisable
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "RolesDisable",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
  
    # Users Lambda CRUD/Disable Resolvers
    
      UsersCreateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: UsersCreate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "UsersCreate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      UsersUpdateResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: UsersUpdate
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "UsersUpdate",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      UsersDeleteResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: UsersDelete
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "UsersDelete",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
      UsersDisableResolver:
        Type: AWS::AppSync::Resolver
        Properties:
          ApiId: !GetAtt IntegrationHubApi.ApiId
          TypeName: Mutation
          FieldName: UsersDisable
          DataSourceName: DynamoDbCrudLambdaDataSource
          RequestMappingTemplate: |
            {
              "version": "2018-05-29",
              "operation": "Invoke",
              "payload": {
                "field": "UsersDisable",
                "arguments": $util.toJson($ctx.args)
              }
            }
          # Always use the standard Lambda response mapping template for CRUD/Disable
          ResponseMappingTemplate: |
            $util.toJson($ctx.result)
    
  

  # Index-based Resolvers
  # --------------------------------------------------- #
  

# --------------------------------------------------- #
Outputs:
  IntegrationHubApiId:
    Description: The ID of the AppSync API
    Value: !GetAtt IntegrationHubApi.ApiId
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id

  IntegrationHubApiEndpoint:
    Description: The endpoint URL of the AppSync API
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-endpoint 