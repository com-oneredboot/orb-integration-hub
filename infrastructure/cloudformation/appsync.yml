# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  # IAM Roles for AppSync
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
  
  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync-graphql-key'
      Description: "AppSync API Key for unauthenticated access"
      SecretString: !GetAtt IntegrationHubApiKey.ApiKey

  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub 's3://${CustomerId}-${ProjectId}-build-templates/${SchemaS3Key}'

  # Data Sources
  # --------------------------------------------------- #
  
  # DEBUG: ApplicationRoles operations: [{'name': 'Create', 'type': 'Mutation', 'field': 'ApplicationRolesCreate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "PutItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Update', 'type': 'Mutation', 'field': 'ApplicationRolesUpdate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #attr = :val",\n    "expressionNames": {\n      "#attr": "status"\n    },\n    "expressionValues": {\n      ":val": { "S": $ctx.args.input.status }\n    }\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Delete', 'type': 'Mutation', 'field': 'ApplicationRolesDelete', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "DeleteItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Disable', 'type': 'Mutation', 'field': 'ApplicationRolesDisable', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #status = :status, disabledAt = :disabledAt",\n    "expressionNames": {\n      "#status": "status"\n    },\n    "expressionValues": {\n      ":status": { "S": "DISABLED" },\n      ":disabledAt": { "S": "$util.time.nowISO8601()" }\n    }\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}]

  # ApplicationRoles Data Source
  ApplicationRolesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationRolesDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-application-roles'
        AwsRegion: !Ref AWS::Region

  # ApplicationRoles Resolvers
  # --------------------------------------------------- #
  
  
  ApplicationRolesCreateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesCreate
      DataSourceName: !GetAtt ApplicationRolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationRolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesUpdate
      DataSourceName: !GetAtt ApplicationRolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #attr = :val",
            "expressionNames": {
              "#attr": "status"
            },
            "expressionValues": {
              ":val": { "S": $ctx.args.input.status }
            }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationRolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDelete
      DataSourceName: !GetAtt ApplicationRolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationRolesDisableResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDisable
      DataSourceName: !GetAtt ApplicationRolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #status = :status, disabledAt = :disabledAt",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": { "S": "DISABLED" },
              ":disabledAt": { "S": "$util.time.nowISO8601()" }
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  
  # DEBUG: Applications operations: [{'name': 'Create', 'type': 'Mutation', 'field': 'ApplicationsCreate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "PutItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Update', 'type': 'Mutation', 'field': 'ApplicationsUpdate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #attr = :val",\n    "expressionNames": {\n      "#attr": "status"\n    },\n    "expressionValues": {\n      ":val": { "S": $ctx.args.input.status }\n    }\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Delete', 'type': 'Mutation', 'field': 'ApplicationsDelete', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "DeleteItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Disable', 'type': 'Mutation', 'field': 'ApplicationsDisable', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #status = :status, disabledAt = :disabledAt",\n    "expressionNames": {\n      "#status": "status"\n    },\n    "expressionValues": {\n      ":status": { "S": "DISABLED" },\n      ":disabledAt": { "S": "$util.time.nowISO8601()" }\n    }\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}]

  # Applications Data Source
  ApplicationsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationsDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-applications'
        AwsRegion: !Ref AWS::Region

  # Applications Resolvers
  # --------------------------------------------------- #
  
  
  ApplicationsCreateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsCreate
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationsUpdateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsUpdate
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #attr = :val",
            "expressionNames": {
              "#attr": "status"
            },
            "expressionValues": {
              ":val": { "S": $ctx.args.input.status }
            }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationsDeleteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDelete
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationsDisableResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDisable
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #status = :status, disabledAt = :disabledAt",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": { "S": "DISABLED" },
              ":disabledAt": { "S": "$util.time.nowISO8601()" }
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  
  # DEBUG: ApplicationUsers operations: [{'name': 'Create', 'type': 'Mutation', 'field': 'ApplicationUsersCreate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "PutItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Update', 'type': 'Mutation', 'field': 'ApplicationUsersUpdate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #attr = :val",\n    "expressionNames": {\n      "#attr": "status"\n    },\n    "expressionValues": {\n      ":val": { "S": $ctx.args.input.status }\n    }\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Delete', 'type': 'Mutation', 'field': 'ApplicationUsersDelete', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "DeleteItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Disable', 'type': 'Mutation', 'field': 'ApplicationUsersDisable', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #status = :status, disabledAt = :disabledAt",\n    "expressionNames": {\n      "#status": "status"\n    },\n    "expressionValues": {\n      ":status": { "S": "DISABLED" },\n      ":disabledAt": { "S": "$util.time.nowISO8601()" }\n    }\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}]

  # ApplicationUsers Data Source
  ApplicationUsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationUsersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-application-users'
        AwsRegion: !Ref AWS::Region

  # ApplicationUsers Resolvers
  # --------------------------------------------------- #
  
  
  ApplicationUsersCreateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersCreate
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationUsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersUpdate
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #attr = :val",
            "expressionNames": {
              "#attr": "status"
            },
            "expressionValues": {
              ":val": { "S": $ctx.args.input.status }
            }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationUsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDelete
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  ApplicationUsersDisableResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDisable
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #status = :status, disabledAt = :disabledAt",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": { "S": "DISABLED" },
              ":disabledAt": { "S": "$util.time.nowISO8601()" }
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  
  # DEBUG: Roles operations: [{'name': 'Create', 'type': 'Mutation', 'field': 'RolesCreate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "PutItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Update', 'type': 'Mutation', 'field': 'RolesUpdate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #attr = :val",\n    "expressionNames": {\n      "#attr": "status"\n    },\n    "expressionValues": {\n      ":val": { "S": $ctx.args.input.status }\n    }\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Delete', 'type': 'Mutation', 'field': 'RolesDelete', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "DeleteItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Disable', 'type': 'Mutation', 'field': 'RolesDisable', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #status = :status, disabledAt = :disabledAt",\n    "expressionNames": {\n      "#status": "status"\n    },\n    "expressionValues": {\n      ":status": { "S": "DISABLED" },\n      ":disabledAt": { "S": "$util.time.nowISO8601()" }\n    }\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}]

  # Roles Data Source
  RolesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: RolesDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-roles'
        AwsRegion: !Ref AWS::Region

  # Roles Resolvers
  # --------------------------------------------------- #
  
  
  RolesCreateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesCreate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  RolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesUpdate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #attr = :val",
            "expressionNames": {
              "#attr": "status"
            },
            "expressionValues": {
              ":val": { "S": $ctx.args.input.status }
            }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  RolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDelete
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  RolesDisableResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDisable
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #status = :status, disabledAt = :disabledAt",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": { "S": "DISABLED" },
              ":disabledAt": { "S": "$util.time.nowISO8601()" }
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  
  # DEBUG: Users operations: [{'name': 'Create', 'type': 'Mutation', 'field': 'UsersCreate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "PutItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Update', 'type': 'Mutation', 'field': 'UsersUpdate', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #attr = :val",\n    "expressionNames": {\n      "#attr": "status"\n    },\n    "expressionValues": {\n      ":val": { "S": $ctx.args.input.status }\n    }\n  },\n  "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Delete', 'type': 'Mutation', 'field': 'UsersDelete', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "DeleteItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}, {'name': 'Disable', 'type': 'Mutation', 'field': 'UsersDisable', 'request_template': '{\n  "version": "2018-05-29",\n  "operation": "UpdateItem",\n  "key": {\n    "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)\n  },\n  "update": {\n    "expression": "SET #status = :status, disabledAt = :disabledAt",\n    "expressionNames": {\n      "#status": "status"\n    },\n    "expressionValues": {\n      ":status": { "S": "DISABLED" },\n      ":disabledAt": { "S": "$util.time.nowISO8601()" }\n    }\n  }\n}', 'response_template': '$util.toJson($ctx.result)'}]

  # Users Data Source
  UsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: UsersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '${CustomerId}-${ProjectId}-${Environment}-users'
        AwsRegion: !Ref AWS::Region

  # Users Resolvers
  # --------------------------------------------------- #
  
  
  UsersCreateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersCreate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  UsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersUpdate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #attr = :val",
            "expressionNames": {
              "#attr": "status"
            },
            "expressionValues": {
              ":val": { "S": $ctx.args.input.status }
            }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  UsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDelete
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  UsersDisableResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDisable
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET #status = :status, disabledAt = :disabledAt",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": { "S": "DISABLED" },
              ":disabledAt": { "S": "$util.time.nowISO8601()" }
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  

  # Index-based Resolvers
  # --------------------------------------------------- #
  

# --------------------------------------------------- #
Outputs:
  IntegrationHubApiId:
    Description: The ID of the AppSync API
    Value: !GetAtt IntegrationHubApi.ApiId
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id

  IntegrationHubApiEndpoint:
    Description: The endpoint URL of the AppSync API
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-endpoint 