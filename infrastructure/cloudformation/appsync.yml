# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CustomerId}-${ProjectId}-${Environment}-*'

  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-graphql-api-key'
      Description: "GraphQL API Key for frontend authentication"
      SecretString: !Sub |
        {
          "api_key": "${IntegrationHubApiKey.ApiKey}",
          "description": "GraphQL API key for frontend access"
        }

  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub 's3://${CustomerId}-${ProjectId}-build-templates/${SchemaS3Key}'

  IntegrationHubApiId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id
      Type: String
      Value: !GetAtt IntegrationHubApi.ApiId

  GraphqlApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${CustomerId}-${ProjectId}-${Environment}-graphql-api-url"
      Type: String
      Value: !GetAtt IntegrationHubApi.GraphQLUrl
      Description: "GraphQL API URL for frontend API calls"
      Tags:
        Billable: "true"
        CustomerId: !Ref CustomerId
        Environment: !Ref Environment
        ProjectId: !Ref ProjectId

  # DynamoDB DataSources
  # Jinja template for AppSync DynamoDB DataSources
  NotificationsDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: NotificationsDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-notifications-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  ApplicationUsersDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationUsersDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-users-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  SmsRateLimitDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: SmsRateLimitDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-sms-rate-limit-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  OrganizationUsersDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: OrganizationUsersDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-organization-users-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  ApplicationRolesDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationRolesDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-roles-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  RolesDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: RolesDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-roles-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  ApplicationsDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationsDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-applications-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  UsersDynamoDbDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: UsersDynamoDbDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-name}}'
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
 
  # Lambda DataSources
  # Jinja template for AppSync Lambda DataSources
  OwnershipTransferRequestsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: OwnershipTransferRequestsLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-ownership-transfer-requests-lambda-arn}}'
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  OrganizationsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: OrganizationsLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-organizations-lambda-arn}}'
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  PrivacyRequestsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: PrivacyRequestsLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-privacy-requests-lambda-arn}}'
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  SmsVerificationLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: SmsVerificationLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-sms-verification-lambda-arn}}'
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
 
  # DynamoDB Resolvers
  NotificationsCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: NotificationsCreate
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "notificationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.notificationId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: NotificationsUpdate
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "notificationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "notificationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.notificationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: NotificationsDelete
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "notificationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.notificationId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: NotificationsDisable
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "notificationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "notificationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.notificationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsQueryByNotificationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: NotificationsQueryByNotificationId
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "notificationId = :notificationId",
            "expressionValues": {
              ":notificationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.notificationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsQueryByRecipientUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: NotificationsQueryByRecipientUserId
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserNotificationsIndex",
          "query": {
            "expression": "recipientUserId = :recipientUserId",
            "expressionValues": {
              ":recipientUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.recipientUserId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsQueryByRecipientUserIdAndCreatedAtResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: NotificationsQueryByRecipientUserIdAndCreatedAt
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserNotificationsIndex",
          "query": {
            "expression": "recipientUserId = :recipientUserId AND createdAt = :createdAt",
            "expressionValues": {
              ":recipientUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.recipientUserId),
              ":createdAt": $util.dynamodb.toDynamoDBJson($ctx.args.input.createdAt)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsQueryByTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: NotificationsQueryByType
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "TypeStatusIndex",
          "query": {
            "expression": "type = :type",
            "expressionValues": {
              ":type": $util.dynamodb.toDynamoDBJson($ctx.args.input.type)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  NotificationsQueryByTypeAndStatusResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - NotificationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: NotificationsQueryByTypeAndStatus
      DataSourceName: NotificationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "TypeStatusIndex",
          "query": {
            "expression": "type = :type AND status = :status",
            "expressionValues": {
              ":type": $util.dynamodb.toDynamoDBJson($ctx.args.input.type),
              ":status": $util.dynamodb.toDynamoDBJson($ctx.args.input.status)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersCreate
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersUpdate
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationUserId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDelete
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationUsersDisable
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationUserId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByApplicationUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByApplicationUserId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationUserId = :applicationUserId",
            "expressionValues": {
              ":applicationUserId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationUserId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByUserId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserAppIndex",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByUserIdAndApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByUserIdAndApplicationId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserAppIndex",
          "query": {
            "expression": "userId = :userId AND applicationId = :applicationId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByApplicationId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "AppUserIndex",
          "query": {
            "expression": "applicationId = :applicationId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationUsersQueryByApplicationIdAndUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationUsersQueryByApplicationIdAndUserId
      DataSourceName: ApplicationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "AppUserIndex",
          "query": {
            "expression": "applicationId = :applicationId AND userId = :userId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId),
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  SmsRateLimitCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsRateLimitDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: SmsRateLimitCreate
      DataSourceName: SmsRateLimitDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "phoneNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.phoneNumber)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  SmsRateLimitUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsRateLimitDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: SmsRateLimitUpdate
      DataSourceName: SmsRateLimitDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "phoneNumber")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "phoneNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.phoneNumber)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  SmsRateLimitDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsRateLimitDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: SmsRateLimitDelete
      DataSourceName: SmsRateLimitDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "phoneNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.phoneNumber)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  SmsRateLimitDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsRateLimitDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: SmsRateLimitDisable
      DataSourceName: SmsRateLimitDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "phoneNumber")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "phoneNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.phoneNumber)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  SmsRateLimitQueryByPhoneNumberResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsRateLimitDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: SmsRateLimitQueryByPhoneNumber
      DataSourceName: SmsRateLimitDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "phoneNumber = :phoneNumber",
            "expressionValues": {
              ":phoneNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.phoneNumber)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationUsersCreate
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationUsersUpdate
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationUsersDelete
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationUsersDisable
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationUsersQueryByUserId
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersQueryByOrganizationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationUsersQueryByOrganizationId
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "organizationId = :organizationId",
            "expressionValues": {
              ":organizationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.organizationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersQueryByUserIdAndOrganizationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationUsersQueryByUserIdAndOrganizationId
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "userId = :userId AND organizationId = :organizationId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":organizationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.organizationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersQueryByOrganizationIdAndRoleResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationUsersQueryByOrganizationIdAndRole
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "OrganizationMembersIndex",
          "query": {
            "expression": "organizationId = :organizationId AND role = :role",
            "expressionValues": {
              ":organizationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.organizationId),
              ":role": $util.dynamodb.toDynamoDBJson($ctx.args.input.role)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  OrganizationUsersQueryByUserIdAndRoleResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationUsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationUsersQueryByUserIdAndRole
      DataSourceName: OrganizationUsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserOrganizationsIndex",
          "query": {
            "expression": "userId = :userId AND role = :role",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":role": $util.dynamodb.toDynamoDBJson($ctx.args.input.role)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesCreate
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesUpdate
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationRoleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDelete
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationRolesDisable
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationRoleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByApplicationRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByApplicationRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationRoleId = :applicationRoleId",
            "expressionValues": {
              ":applicationRoleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationRoleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByUserId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByUserIdAndRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByUserIdAndRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId AND roleId = :roleId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByApplicationId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "ApplicationRoleIndex",
          "query": {
            "expression": "applicationId = :applicationId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByApplicationIdAndRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByApplicationIdAndRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "ApplicationRoleIndex",
          "query": {
            "expression": "applicationId = :applicationId AND roleId = :roleId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId),
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByRoleId
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "RoleTypeIndex",
          "query": {
            "expression": "roleId = :roleId",
            "expressionValues": {
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationRolesQueryByRoleIdAndRoleTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationRolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationRolesQueryByRoleIdAndRoleType
      DataSourceName: ApplicationRolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "RoleTypeIndex",
          "query": {
            "expression": "roleId = :roleId AND roleType = :roleType",
            "expressionValues": {
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId),
              ":roleType": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleType)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesCreate
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesUpdate
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "roleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDelete
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesDisable
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "roleId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesQueryByRoleIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQueryByRoleId
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "roleId = :roleId",
            "expressionValues": {
              ":roleId": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQueryByUserId
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  RolesQueryByUserIdAndRoleTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RolesDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQueryByUserIdAndRoleType
      DataSourceName: RolesDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "UserRoleIndex",
          "query": {
            "expression": "userId = :userId AND roleType = :roleType",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId),
              ":roleType": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleType)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsCreate
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsUpdate
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDelete
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsDisable
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "applicationId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsQueryByApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationsQueryByApplicationId
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "applicationId = :applicationId",
            "expressionValues": {
              ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsQueryByOrganizationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationsQueryByOrganizationId
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "OrganizationAppsIndex",
          "query": {
            "expression": "organizationId = :organizationId",
            "expressionValues": {
              ":organizationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.organizationId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  ApplicationsQueryByOrganizationIdAndCreatedAtResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - ApplicationsDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationsQueryByOrganizationIdAndCreatedAt
      DataSourceName: ApplicationsDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "OrganizationAppsIndex",
          "query": {
            "expression": "organizationId = :organizationId AND createdAt = :createdAt",
            "expressionValues": {
              ":organizationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.organizationId),
              ":createdAt": $util.dynamodb.toDynamoDBJson($ctx.args.input.createdAt)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersCreate
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersUpdate
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersDeleteResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDelete
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersDisableResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersDisable
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($key = "userId")
        #set($updateExpression = "")
        #set($expressionNames = {})
        #set($expressionValues = {})
        #set($separator = "")
        
        ## Automatically set updatedAt to current timestamp
        #set($updateExpression = "updatedAt = :updatedAt")
        $!expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDB($util.time.nowISO8601()))
        #set($separator = ", ")
        
        #foreach($entry in $input.entrySet())
          #if($entry.key != $key && $entry.key != "updatedAt")
            #set($updateExpression = "$updateExpression$separator#$entry.key = :$entry.key")
            $!expressionNames.put("#$entry.key", "$entry.key")
            $!expressionValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))
            #set($separator = ", ")
          #end
        #end
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)
          },
          "update": {
            "expression": "SET $updateExpression",
            "expressionNames": $util.toJson($expressionNames),
            "expressionValues": $util.toJson($expressionValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByUserId
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByEmailResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByEmail
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "EmailIndex",
          "query": {
            "expression": "email = :email",
            "expressionValues": {
              ":email": $util.dynamodb.toDynamoDBJson($ctx.args.input.email)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByCognitoIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByCognitoId
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "CognitoIdIndex",
          "query": {
            "expression": "cognitoId = :cognitoId",
            "expressionValues": {
              ":cognitoId": $util.dynamodb.toDynamoDBJson($ctx.args.input.cognitoId)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
  UsersQueryByCognitoSubResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - UsersDynamoDbDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQueryByCognitoSub
      DataSourceName: UsersDynamoDbDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "CognitoSubIndex",
          "query": {
            "expression": "cognitoSub = :cognitoSub",
            "expressionValues": {
              ":cognitoSub": $util.dynamodb.toDynamoDBJson($ctx.args.input.cognitoSub)            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          {
            "StatusCode": 500,
            "Message": "$ctx.error.message",
            "Data": null
          }
        #else
          {
            "StatusCode": 200,
            "Message": null,
            "Data": #if($ctx.result && $ctx.result.items) $util.toJson($ctx.result.items) #elseif($ctx.result) $util.toJson($ctx.result) #else null #end
          }
        #end
 
  # Lambda Resolvers
  SmsVerificationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SmsVerificationLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation  # or Query, adjust as needed
      FieldName: SmsVerification  # or the actual field name
      DataSourceName: SmsVerificationLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx.args)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  OwnershipTransferRequestsCreateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OwnershipTransferRequestsCreate
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsCreate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsUpdateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OwnershipTransferRequestsUpdate
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsUpdate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsDeleteResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OwnershipTransferRequestsDelete
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsDelete",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsDisableResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OwnershipTransferRequestsDisable
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsDisable",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByTransferIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByTransferId
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByTransferId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByCurrentOwnerIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByCurrentOwnerId
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByCurrentOwnerId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByCurrentOwnerIdAndCreatedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByCurrentOwnerIdAndCreatedAt
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByCurrentOwnerIdAndCreatedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByNewOwnerIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByNewOwnerId
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByNewOwnerId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByNewOwnerIdAndCreatedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByNewOwnerIdAndCreatedAt
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByNewOwnerIdAndCreatedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByStatusResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByStatus
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByStatus",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByStatusAndCreatedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByStatusAndCreatedAt
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByStatusAndCreatedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OwnershipTransferRequestsQueryByStatusAndExpiresAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OwnershipTransferRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OwnershipTransferRequestsQueryByStatusAndExpiresAt
      DataSourceName: OwnershipTransferRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OwnershipTransferRequestsQueryByStatusAndExpiresAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsCreateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationsCreate
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsCreate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsUpdateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationsUpdate
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsUpdate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsDeleteResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationsDelete
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsDelete",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsDisableResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: OrganizationsDisable
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsDisable",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsQueryByOrganizationIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsQueryByOrganizationId
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsQueryByOrganizationId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsQueryByOwnerIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsQueryByOwnerId
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsQueryByOwnerId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsQueryByOwnerIdAndCreatedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsQueryByOwnerIdAndCreatedAt
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsQueryByOwnerIdAndCreatedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsQueryByStatusResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsQueryByStatus
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsQueryByStatus",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsQueryByStatusAndCreatedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsQueryByStatusAndCreatedAt
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsQueryByStatusAndCreatedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  OrganizationsWithDetailsQueryByOwnerIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - OrganizationsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: OrganizationsWithDetailsQueryByOwnerId
      DataSourceName: OrganizationsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "OrganizationsWithDetailsQueryByOwnerId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        #if($ctx.result.StatusCode == 200)
          $util.toJson($ctx.result.Data)
        #else
          $util.error($ctx.result.Message)
        #end  PrivacyRequestsCreateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: PrivacyRequestsCreate
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsCreate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsUpdateResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: PrivacyRequestsUpdate
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsUpdate",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsDeleteResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: PrivacyRequestsDelete
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsDelete",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsDisableResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: PrivacyRequestsDisable
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsDisable",
              "parentTypeName": "Mutation",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByRequestIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByRequestId
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByRequestId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByRequestTypeResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByRequestType
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByRequestType",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByRequestTypeAndReceivedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByRequestTypeAndReceivedAt
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByRequestTypeAndReceivedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByDataSubjectEmailResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByDataSubjectEmail
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByDataSubjectEmail",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByDataSubjectEmailAndReceivedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByDataSubjectEmailAndReceivedAt
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByDataSubjectEmailAndReceivedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByOrganizationIdResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByOrganizationId
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByOrganizationId",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByOrganizationIdAndReceivedAtResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByOrganizationIdAndReceivedAt
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByOrganizationIdAndReceivedAt",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByStatusResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByStatus
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByStatus",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)  PrivacyRequestsQueryByStatusAndDeadlineResolver:    Type: AWS::AppSync::Resolver
    DependsOn:
      - PrivacyRequestsLambdaDataSource
      - IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: PrivacyRequestsQueryByStatusAndDeadline
      DataSourceName: PrivacyRequestsLambdaDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "PrivacyRequestsQueryByStatusAndDeadline",
              "parentTypeName": "Query",
              "selectionSetList": $util.toJson($ctx.info.selectionSetList),
              "selectionSetGraphQL": $util.toJson($ctx.info.selectionSetGraphQL)
            },
            "arguments": $util.toJson($ctx.args),
            "identity": $util.toJson($ctx.identity),
            "source": $util.toJson($ctx.source),
            "request": $util.toJson($ctx.request),
            "prev": $util.toJson($ctx.prev),
            "stash": $util.toJson($ctx.stash)
          }
        }
      ResponseMappingTemplate: |        $util.toJson($ctx.result)
# --------------------------------------------------- #
Outputs:
  IntegrationHubApiId:
    Description: The ID of the AppSync API
    Value: !GetAtt IntegrationHubApi.ApiId
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-id

  IntegrationHubApiEndpoint:
    Description: The endpoint URL of the AppSync API
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
    Export:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-appsync-api-endpoint 