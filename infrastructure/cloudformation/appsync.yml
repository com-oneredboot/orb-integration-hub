# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  # IAM Roles for AppSync
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
  

  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs


  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false


  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838


  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync-graphql-key'
      Description: "AppSync API Key for unauthenticated access"
      SecretString: !GetAtt IntegrationHubApiKey.ApiKey


  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub 's3://${CustomerId}-${ProjectId}-build-templates/${SchemaS3Key}'

  # Data Sources
  ApplicationsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationsDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub 'resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-applications-table-name'
        AwsRegion: !Ref AWS::Region

  # Applications Resolvers
  ApplicationsCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsCreate
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)          },
          "attributeValues": $util.toJson($input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applications created successfully",
          "Data": $ctx.args.input
        }


  ApplicationsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationsQuery
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.applicationId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        #else
          $util.error("Invalid identifier. Must provide applicationId")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "StatusCode": 200,
          "Data": {}
        })
        
        #if($ctx.result)
          #set($result = {})
          #foreach($field in $ctx.result.keySet())
            #set($camelField = $util.str.toCamelCase($field))
            $util.qr($result.put($camelField, $ctx.result.get($field)))
          #end
          $util.qr($response.put("Data", $result))
        #else
          $util.qr($response.put("Data", null))
        #end
        
        $util.toJson($response)


  ApplicationsUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationsUpdate
      DataSourceName: !GetAtt ApplicationsDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        #if(!$input.application_id)
          $util.error("applicationId is a required field for updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "application_id" )
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applications updated successfully",
          "Data": $ctx.args.input
        }
  ApplicationrolesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationrolesDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub 'resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-roles-table-name'
        AwsRegion: !Ref AWS::Region

  # Applicationroles Resolvers
  ApplicationrolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationrolesCreate
      DataSourceName: !GetAtt ApplicationrolesDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)            ,"role_id": $util.dynamodb.toDynamoDBJson($input.role_id)          },
          "attributeValues": $util.toJson($input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applicationroles created successfully",
          "Data": $ctx.args.input
        }


  ApplicationrolesQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationrolesQuery
      DataSourceName: !GetAtt ApplicationrolesDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.applicationId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)              ,"role_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)            }
          }
        #else
          $util.error("Invalid identifier. Must provide applicationId")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "StatusCode": 200,
          "Data": {}
        })
        
        #if($ctx.result)
          #set($result = {})
          #foreach($field in $ctx.result.keySet())
            #set($camelField = $util.str.toCamelCase($field))
            $util.qr($result.put($camelField, $ctx.result.get($field)))
          #end
          $util.qr($response.put("Data", $result))
        #else
          $util.qr($response.put("Data", null))
        #end
        
        $util.toJson($response)


  ApplicationrolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationrolesUpdate
      DataSourceName: !GetAtt ApplicationrolesDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        #if(!$input.application_id)
          $util.error("applicationId is a required field for updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "application_id"  && $field != "role_id" )
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)            ,"role_id": $util.dynamodb.toDynamoDBJson($input.role_id)          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applicationroles updated successfully",
          "Data": $ctx.args.input
        }
  ApplicationusersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationusersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub 'resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-application-users-table-name'
        AwsRegion: !Ref AWS::Region

  # Applicationusers Resolvers
  ApplicationusersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationusersCreate
      DataSourceName: !GetAtt ApplicationusersDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)            ,"user_id": $util.dynamodb.toDynamoDBJson($input.user_id)          },
          "attributeValues": $util.toJson($input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applicationusers created successfully",
          "Data": $ctx.args.input
        }


  ApplicationusersQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: ApplicationusersQuery
      DataSourceName: !GetAtt ApplicationusersDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.applicationId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)              ,"user_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        #else
          $util.error("Invalid identifier. Must provide applicationId")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "StatusCode": 200,
          "Data": {}
        })
        
        #if($ctx.result)
          #set($result = {})
          #foreach($field in $ctx.result.keySet())
            #set($camelField = $util.str.toCamelCase($field))
            $util.qr($result.put($camelField, $ctx.result.get($field)))
          #end
          $util.qr($response.put("Data", $result))
        #else
          $util.qr($response.put("Data", null))
        #end
        
        $util.toJson($response)


  ApplicationusersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: ApplicationusersUpdate
      DataSourceName: !GetAtt ApplicationusersDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        #if(!$input.application_id)
          $util.error("applicationId is a required field for updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "application_id"  && $field != "user_id" )
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($input.application_id)            ,"user_id": $util.dynamodb.toDynamoDBJson($input.user_id)          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Applicationusers updated successfully",
          "Data": $ctx.args.input
        }
  RolesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: RolesDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub 'resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-roles-table-name'
        AwsRegion: !Ref AWS::Region

  # Roles Resolvers
  RolesCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesCreate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "role_id": $util.dynamodb.toDynamoDBJson($input.role_id)            ,"application_id": $util.dynamodb.toDynamoDBJson($input.application_id)          },
          "attributeValues": $util.toJson($input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Roles created successfully",
          "Data": $ctx.args.input
        }


  RolesQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: RolesQuery
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.roleId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "role_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.roleId)              ,"application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.applicationId)            }
          }
        #else
          $util.error("Invalid identifier. Must provide roleId")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "StatusCode": 200,
          "Data": {}
        })
        
        #if($ctx.result)
          #set($result = {})
          #foreach($field in $ctx.result.keySet())
            #set($camelField = $util.str.toCamelCase($field))
            $util.qr($result.put($camelField, $ctx.result.get($field)))
          #end
          $util.qr($response.put("Data", $result))
        #else
          $util.qr($response.put("Data", null))
        #end
        
        $util.toJson($response)


  RolesUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: RolesUpdate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        #if(!$input.role_id)
          $util.error("roleId is a required field for updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "role_id"  && $field != "application_id" )
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "role_id": $util.dynamodb.toDynamoDBJson($input.role_id)            ,"application_id": $util.dynamodb.toDynamoDBJson($input.application_id)          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Roles updated successfully",
          "Data": $ctx.args.input
        }
  UsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: UsersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub 'resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-users-table-name'
        AwsRegion: !Ref AWS::Region

  # Users Resolvers
  UsersCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersCreate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "user_id": $util.dynamodb.toDynamoDBJson($input.user_id)          },
          "attributeValues": $util.toJson($input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Users created successfully",
          "Data": $ctx.args.input
        }


  UsersQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: UsersQuery
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.userId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "user_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.userId)            }
          }
        #else
          $util.error("Invalid identifier. Must provide userId")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "StatusCode": 200,
          "Data": {}
        })
        
        #if($ctx.result)
          #set($result = {})
          #foreach($field in $ctx.result.keySet())
            #set($camelField = $util.str.toCamelCase($field))
            $util.qr($result.put($camelField, $ctx.result.get($field)))
          #end
          $util.qr($response.put("Data", $result))
        #else
          $util.qr($response.put("Data", null))
        #end
        
        $util.toJson($response)


  UsersUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: UsersUpdate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        #set($input = {})
        #foreach($field in $ctx.args.input.keySet())
          #set($dynamoField = $util.str.toSnakeCase($field))
          $util.qr($input.put($dynamoField, $ctx.args.input.get($field)))
        #end

        #if(!$input.user_id)
          $util.error("userId is a required field for updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "user_id" )
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "user_id": $util.dynamodb.toDynamoDBJson($input.user_id)          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "StatusCode": 200,
          "Message": "Users updated successfully",
          "Data": $ctx.args.input
        }
# --------------------------------------------------- #
Outputs:
  GraphQLApiUrl:
    Description: 'URL of the AppSync GraphQL API'
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
  GraphQLApiKeySecretName:
    Description: 'Name of the Secret containing the AppSync API Key'
    Value: !Ref ApiKeySecret 