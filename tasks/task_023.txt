# Task ID: 23
# Title: Roll Out SMS Verification Feature with Full Stack Refactoring
# Status: in-progress
# Dependencies: 3, 15, 19, 22
# Priority: medium
# Description: Implement the SMS Verification feature by refactoring the existing PhoneVerification to SmsVerification across the entire stack, including schema updates, Lambda modifications, AppSync integration, and frontend changes.
# Details:
This task involves a comprehensive refactoring and feature implementation across multiple layers of the application:

1. **Schema/Model Refactoring**:
   - Rename `PhoneVerification` to `SmsVerification` in all schema definitions
   - Update field names to follow PascalCase convention consistently
   - Modify GraphQL schema types, inputs, queries, and mutations
   - Ensure backward compatibility during transition period

2. **Lambda Function Updates**:
   - Refactor the verification Lambda to use the new naming convention
   - Update response structure to return all fields in PascalCase format
   - Enhance error handling and validation for SMS verification
   - Implement proper logging for verification attempts and outcomes

3. **AppSync Integration**:
   - Update resolvers to work with the new schema definitions
   - Modify mapping templates to handle the PascalCase field names
   - Ensure proper data transformation between Lambda and client
   - Test resolver performance and error handling

4. **Frontend Implementation**:
   - Update all frontend components that interact with verification
   - Modify form components to handle SMS verification flow
   - Update TypeScript interfaces and models to reflect schema changes
   - Implement proper error handling and user feedback
   - Create responsive UI for verification code entry

5. **Security Considerations**:
   - Implement rate limiting for SMS verification attempts
   - Add proper validation for phone numbers (E.164 format)
   - Ensure secure handling of verification codes
   - Add expiration for verification codes

6. **Configuration Updates**:
   - Update environment variables and configuration settings
   - Configure SMS service provider integration
   - Set up monitoring for SMS delivery and verification success rates

# Test Strategy:
The testing strategy will verify the SMS verification feature works end-to-end:

1. **Unit Testing**:
   - Test Lambda function with various input scenarios (valid phone, invalid phone, etc.)
   - Verify proper PascalCase field naming in responses
   - Test schema validation for new SmsVerification types
   - Validate frontend components in isolation

2. **Integration Testing**:
   - Verify AppSync resolvers correctly handle the new schema
   - Test data flow between frontend, AppSync, and Lambda
   - Validate error handling across the stack
   - Test backward compatibility with existing code

3. **End-to-End Testing**:
   - Create automated E2E tests for the complete verification flow
   - Test on multiple devices and screen sizes
   - Verify SMS delivery and code validation (using test SMS provider)
   - Test edge cases like resending codes, expired codes, etc.

4. **Manual Testing**:
   - Perform user acceptance testing with real devices
   - Verify SMS delivery timing and reliability
   - Test the user experience of the verification process
   - Validate accessibility of the verification UI

5. **Performance Testing**:
   - Measure response times for verification requests
   - Test system under load with multiple concurrent verifications
   - Monitor Lambda execution times and AppSync performance

6. **Security Testing**:
   - Verify rate limiting functionality
   - Test for common security vulnerabilities
   - Ensure verification codes are properly secured

# Subtasks:
## 1. Refactor schema and models to SmsVerification [done]
### Dependencies: None
### Description: Rename PhoneVerification.yml to SmsVerification.yml, update the model name and attribute names for consistency, regenerate TypeScript/Python models, and rename the frontend model file to SmsVerificationModel.ts.
### Details:


## 2. Update lambda function to match new contract [done]
### Dependencies: None
### Description: Update the sms_verification lambda to return PascalCase fields and a Data object, and ensure the handler matches the new schema contract.
### Details:


## 3. Integrate sms_verification lambda with AppSync [pending]
### Dependencies: None
### Description: Add the sms_verification lambda as a data source in AppSync, add a resolver for the mutation/query, and ensure the schema is included in the GraphQL API.
### Details:


## 4. Update frontend to use SmsVerification [pending]
### Dependencies: None
### Description: Update the frontend to use the new SmsVerificationModel, update GraphQL queries/mutations, and ensure the response contract is correct.
### Details:


## 5. Test and validate end-to-end SMS verification [pending]
### Dependencies: None
### Description: Test the full flow from frontend to lambda, ensure the code is sent, and the response matches the contract. Add unit/integration tests for the lambda.
### Details:


## 6. Update documentation for SMS verification feature [pending]
### Dependencies: None
### Description: Update documentation to reflect the new schema, lambda, integration points, and usage instructions for the SMS verification feature.
### Details:


