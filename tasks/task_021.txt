# Task ID: 21
# Title: Extract Schema Generator into Standalone Python Package
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create a standalone, reusable Python package for the schema/code generator currently in generate.py and templates, with CLI and MCP integration capabilities to enable reuse across projects.
# Details:
This task involves extracting the existing schema/code generator functionality from generate.py and associated templates into a properly structured Python package named 'orb-schema-generator'. The implementation should include:

1. Package Structure:
   - Create a proper Python package structure with setup.py, README, documentation
   - Organize code into logical modules (core generation, templates, CLI interface)
   - Implement proper dependency management

2. Features:
   - Command-line interface (CLI) for standalone usage
   - Programmatic API for integration into other Python applications
   - Template management system that allows for customization
   - Configuration options for different output formats and targets
   - Integration hooks for Task Master/MCP workflows

3. Migration Steps:
   - Refactor the current generate.py code to be more modular
   - Extract template handling into a dedicated component
   - Create abstraction layers for input/output operations
   - Ensure backward compatibility with existing usage patterns

4. Documentation:
   - Installation instructions (pip install, development setup)
   - Usage examples for CLI and programmatic API
   - Template customization guide
   - Integration guide for Task Master/MCP
   - Contributing guidelines

5. Publishing:
   - Package the code for PyPI distribution
   - Set up CI/CD for automated testing and publishing
   - Version the package appropriately (semantic versioning)

The package should maintain all current functionality while making it more accessible, configurable, and maintainable for use across multiple projects.

# Test Strategy:
Testing for this task should be comprehensive and include:

1. Unit Tests:
   - Test each component of the package independently
   - Verify template rendering with various inputs
   - Test CLI argument parsing and execution paths
   - Validate configuration handling and defaults

2. Integration Tests:
   - Test the package as installed via pip
   - Verify it works when imported into another Python project
   - Test CLI functionality end-to-end
   - Validate MCP integration workflows

3. Compatibility Tests:
   - Ensure the package works with the existing codebase
   - Verify that generated output matches previous implementation
   - Test with different Python versions (3.7+)

4. Documentation Tests:
   - Verify all examples in documentation work as described
   - Test installation instructions on clean environments
   - Validate API documentation against actual implementation

5. Acceptance Criteria:
   - Package can be installed via pip install orb-schema-generator
   - CLI commands work as documented
   - Existing projects can migrate to using the package with minimal changes
   - New projects can easily integrate the package
   - Task Master/MCP integration is functional
   - All tests pass in CI environment
   - Documentation is complete and accurate

6. Performance Benchmarks:
   - Compare performance metrics before and after extraction
   - Ensure no significant performance regression

The testing process should include automated tests that can be run in CI/CD pipelines as well as manual verification of integration points and documentation accuracy.
