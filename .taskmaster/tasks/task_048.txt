# Task ID: 48
# Title: Convert Users from Direct DynamoDB Access to Lambda-Backed Implementation with Security Layer
# Status: pending
# Dependencies: 4, 47
# Priority: high
# Description: Migrate Users entity from direct DynamoDB access to a Lambda-backed implementation with comprehensive security layer, similar to Organizations, including automatic Cognito sub to userId resolution and maintaining backward compatibility for all existing queries and mutations.
# Details:
Implement comprehensive Users Lambda migration following the Organizations pattern:

**1) Users Lambda Function Creation:**
- Create new Lambda function in backend/src/lambda/users/ with proper IAM roles and DynamoDB permissions
- Implement CRUD operations (create, read, update, delete) with proper error handling and validation
- Add automatic Cognito sub to userId resolution middleware for seamless user identification
- Implement proper logging and monitoring with CloudWatch integration
- Follow existing Lambda patterns from Organizations implementation for consistency

**2) Security Layer Implementation:**
- Integrate with existing RBAC system (Task 4) for role-based access control
- Implement user-level permissions ensuring users can only access their own data unless authorized
- Add request validation and sanitization to prevent injection attacks
- Implement rate limiting for user operations to prevent abuse
- Add audit logging for all user data modifications and access attempts
- Ensure compliance with data privacy regulations (GDPR, CCPA)

**3) AppSync Resolver Migration:**
- Update all existing Users GraphQL resolvers to point to new Lambda function instead of direct DynamoDB
- Maintain exact same GraphQL schema and response formats for backward compatibility
- Implement proper error handling and response transformation in resolvers
- Add caching strategies where appropriate to maintain performance
- Update resolver mapping templates to handle Lambda responses correctly

**4) Cognito Integration Enhancement:**
- Implement automatic sub-to-userId mapping in Lambda middleware
- Handle edge cases for user creation, updates, and deletions
- Ensure proper synchronization between Cognito user pool and Users DynamoDB table
- Add fallback mechanisms for Cognito service unavailability
- Implement proper token validation and user context extraction

**5) Backward Compatibility Assurance:**
- Maintain all existing Users queries and mutations without breaking changes
- Ensure response formats remain identical to current implementation
- Implement comprehensive testing to verify no functional regressions
- Add migration scripts if any data transformations are needed
- Document any subtle behavioral changes for development team

# Test Strategy:
Execute comprehensive testing strategy to ensure seamless migration:

**1) Lambda Function Testing:**
- Unit tests for all CRUD operations with mock DynamoDB responses
- Integration tests with actual DynamoDB table using test data
- Test Cognito sub to userId resolution with various user scenarios
- Load testing to ensure Lambda performance meets current DynamoDB performance
- Error handling tests for DynamoDB failures, timeouts, and invalid requests

**2) Security Layer Validation:**
- Test RBAC integration with different user roles and permissions
- Verify user isolation - users cannot access other users' data
- Security penetration testing for injection attacks and unauthorized access
- Rate limiting validation with burst and sustained request patterns
- Audit log verification for all user operations and access attempts

**3) AppSync Resolver Testing:**
- Test all existing Users GraphQL queries return identical responses
- Test all existing Users GraphQL mutations work without changes
- Performance testing to ensure resolver response times remain acceptable
- Error handling validation for Lambda failures and timeouts
- Cache behavior testing if caching is implemented

**4) Cognito Integration Testing:**
- Test automatic sub-to-userId resolution with new and existing users
- Test user creation flow with Cognito user pool synchronization
- Test edge cases like user deletion, account suspension, and reactivation
- Test token validation and user context extraction accuracy
- Test fallback behavior when Cognito services are unavailable

**5) End-to-End Regression Testing:**
- Execute full user journey testing from registration to data access
- Test all user-related features in the application continue to work
- Performance benchmarking against current direct DynamoDB implementation
- Cross-browser and mobile testing for user-facing functionality
- Monitoring and alerting validation for the new Lambda-based architecture

# Subtasks:
## 1. Create Users Lambda Function Infrastructure [done]
### Dependencies: None
### Description: Set up the foundational Lambda function infrastructure for Users entity with proper IAM roles, DynamoDB permissions, and CloudWatch integration following the Organizations pattern.
### Details:
Create backend/src/lambda/users/ directory structure with handler.py, requirements.txt, and deployment configuration. Set up IAM role with DynamoDB read/write permissions for Users table, CloudWatch logs permissions, and Cognito read permissions. Configure Lambda function with appropriate timeout, memory allocation, and environment variables. Implement basic Lambda handler structure with proper error handling and logging setup using CloudWatch.

## 2. Implement Cognito Sub to UserId Resolution Middleware [done]
### Dependencies: 48.1
### Description: Create middleware component that automatically resolves Cognito sub tokens to internal userId values for seamless user identification across all operations.
### Details:
Implement middleware function that extracts Cognito sub from request context, queries Users table to find corresponding userId, and enriches request context with resolved user information. Handle edge cases for new users, missing mappings, and invalid tokens. Add caching mechanism for frequently accessed user mappings to improve performance. Implement fallback mechanisms for Cognito service unavailability and proper token validation.

## 3. Implement Users CRUD Operations in Lambda [done]
### Dependencies: 48.2
### Description: Develop comprehensive CRUD operations (Create, Read, Update, Delete) for Users entity with proper validation, error handling, and DynamoDB integration.
### Details:
Implement createUser, getUser, updateUser, deleteUser, and listUsers functions with proper input validation using JSON schema. Add comprehensive error handling for DynamoDB operations, validation failures, and authorization errors. Implement proper data sanitization and transformation. Add support for batch operations and filtering capabilities. Ensure all operations maintain data consistency and handle concurrent access scenarios.

## 4. Integrate RBAC Security Layer [done]
### Dependencies: 48.3
### Description: Integrate the existing RBAC system from Task 4 into the Users Lambda function to enforce role-based access control and user-level permissions.
### Details:
Import and integrate RBAC middleware to validate user permissions for each operation. Implement user-level access control ensuring users can only access their own data unless specifically authorized. Add role-based filtering for admin operations like listUsers. Implement permission checks for sensitive operations like user deletion or profile updates. Add proper error responses for unauthorized access attempts with appropriate HTTP status codes.

## 5. Implement Request Validation and Security Measures [pending]
### Dependencies: 48.4
### Description: Add comprehensive request validation, sanitization, rate limiting, and audit logging to prevent security vulnerabilities and ensure compliance.
### Details:
Implement input validation using JSON schema for all request payloads. Add request sanitization to prevent injection attacks and XSS vulnerabilities. Implement rate limiting using DynamoDB-based token bucket algorithm to prevent abuse. Add comprehensive audit logging for all user data modifications and access attempts with proper log formatting for compliance. Implement data privacy controls for GDPR and CCPA compliance including data anonymization capabilities.
<info added on 2025-07-17T19:45:27.582Z>
Integrate aws_audit_logger with comprehensive AuditEventType events including USER_CREATED, USER_UPDATED, USER_DELETED, USER_LOGIN, USER_PROFILE_VIEWED, USER_PASSWORD_CHANGED, and USER_STATUS_CHANGED following the Organizations Lambda pattern. Implement state tracking for before/after changes on all user data modifications with proper JSON serialization of field-level changes. Add compliance flags for GDPR, SOX, and SOC_2 requirements with automatic tagging based on operation type and data sensitivity. Implement critical audit logging for security violations including failed authentication attempts, unauthorized access attempts, and suspicious activity patterns. Ensure all audit events capture complete user context including authenticated user ID, target user ID (for admin operations), IP addresses, user agent strings, session information, and request correlation IDs. Add structured logging for user data access patterns to support compliance reporting and security monitoring with proper log retention policies.
</info added on 2025-07-17T19:45:27.582Z>

## 6. Update GraphQL Schema and Resolver Definitions [done]
### Dependencies: 48.5
### Description: Prepare GraphQL schema updates and resolver definitions to support the Lambda-backed implementation while maintaining backward compatibility.
### Details:
Review existing Users GraphQL schema and ensure all queries and mutations are properly defined. Update resolver mapping templates to prepare for Lambda integration. Add any necessary schema extensions for enhanced functionality while maintaining exact backward compatibility. Document all schema changes and ensure proper versioning. Prepare resolver configuration for Lambda function integration with proper error handling and response transformation.

## 7. Migrate AppSync Resolvers to Lambda Backend [done]
### Dependencies: 48.6
### Description: Update all existing Users GraphQL resolvers to point to the new Lambda function instead of direct DynamoDB access while maintaining exact response formats.
### Details:
Replace all direct DynamoDB resolver configurations with Lambda function invocations. Update resolver mapping templates to handle Lambda request/response transformation. Implement proper error handling and response formatting to maintain exact compatibility with existing client expectations. Add caching strategies using AppSync caching capabilities where appropriate. Ensure all resolver configurations properly handle authentication context and pass user information to Lambda.
<info added on 2025-07-18T18:54:34.665Z>
Added missing query methods to Users Lambda to handle UsersQueryByCognitoSub, UsersQueryByUserId, UsersQueryByEmail, and UsersQueryByCognitoId operations. The frontend uses UsersQueryByCognitoSub to find the user record after authentication. These query methods ensure complete compatibility with existing client expectations and support all user lookup patterns required by the application.
</info added on 2025-07-18T18:54:34.665Z>

## 8. Implement Cognito Synchronization Logic [pending]
### Dependencies: 48.7
### Description: Develop synchronization mechanisms between Cognito user pool and Users DynamoDB table to handle user lifecycle events and maintain data consistency.
### Details:
Implement event handlers for Cognito user pool triggers (pre-signup, post-confirmation, pre-authentication). Add synchronization logic for user creation, updates, and deletions between Cognito and DynamoDB. Handle edge cases for user profile updates, password changes, and account status modifications. Implement conflict resolution for concurrent updates and proper rollback mechanisms for failed synchronizations. Add monitoring and alerting for synchronization failures.

## 9. Implement Comprehensive Error Handling and Monitoring [pending]
### Dependencies: 48.8
### Description: Add robust error handling, logging, and monitoring capabilities throughout the Lambda function with CloudWatch integration and alerting.
### Details:
Implement structured error handling with proper error codes, messages, and HTTP status codes. Add comprehensive CloudWatch logging with proper log levels and structured log formatting. Set up CloudWatch metrics for operation success rates, response times, and error frequencies. Implement alerting for critical errors, high error rates, and performance degradation. Add distributed tracing capabilities for debugging complex user flows and performance optimization.

## 11. Execute Comprehensive Testing and Validation [pending]
### Dependencies: None
### Description: Perform thorough testing of the complete Lambda-backed Users implementation including unit tests, integration tests, and backward compatibility validation.
### Details:
Execute comprehensive unit test suite for all Lambda functions and middleware components. Run integration tests with actual DynamoDB and Cognito services. Perform backward compatibility testing to ensure all existing queries and mutations work identically. Execute performance testing to validate response times meet existing benchmarks. Run security testing to verify all security measures are properly implemented. Conduct user acceptance testing with sample user journeys.

## 12. Deploy and Monitor Production Migration [pending]
### Dependencies: 48.11
### Description: Deploy the Lambda-backed Users implementation to production with proper monitoring, rollback procedures, and gradual traffic migration strategy.
### Details:
Deploy Lambda function and updated resolvers to production environment with proper deployment pipeline. Implement gradual traffic migration using feature flags or canary deployment strategy. Set up comprehensive monitoring dashboards for Lambda performance, error rates, and user experience metrics. Prepare rollback procedures and emergency response plans. Monitor system performance and user feedback during initial deployment phase. Document deployment procedures and operational runbooks for ongoing maintenance.

## 13. Create Users Security Layer with Audit Integration [done]
### Dependencies: None
### Description: Create a dedicated security layer for Users Lambda similar to organizations_security layer, including aws_audit_logger, user context middleware, and security validation components
### Details:
Create backend/src/layers/users_security/ with the following components adapted from organizations_security:

1. **aws_audit_logger.py** - User-specific audit event types:
   - USER_CREATED, USER_UPDATED, USER_DELETED
   - USER_LOGIN, USER_LOGOUT, USER_SESSION_EXPIRED
   - USER_PROFILE_VIEWED, USER_DATA_EXPORTED
   - USER_PASSWORD_CHANGED, USER_MFA_ENABLED/DISABLED
   - USER_STATUS_CHANGED (active/suspended/deleted)
   - USER_ROLE_CHANGED, USER_PERMISSIONS_UPDATED
   
2. **user_context_middleware.py** - Extract and validate user context:
   - Automatic Cognito sub to userId resolution
   - Self-access validation (users can only access their own data)
   - Admin override capabilities for support operations
   - Performance metrics tracking
   
3. **security_manager.py** - User-specific security validations:
   - Data access controls and privacy settings
   - PII data handling and masking
   - Cross-user access prevention
   - Session validation and timeout handling
   
4. **compliance_manager.py** - Privacy regulation compliance:
   - GDPR data handling (right to be forgotten, data export)
   - CCPA compliance for California users
   - Data retention policies
   - Consent management integration

