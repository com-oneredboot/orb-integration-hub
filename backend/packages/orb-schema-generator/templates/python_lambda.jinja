"""
{{ schema.name }} Lambda-backed GraphQL resolver model.
Generated at {{ timestamp }}
"""

from typing import Optional
from pydantic import BaseModel, Field, validator
from datetime import datetime
{% for attr in schema.attributes %}
{% if attr.enum_type %}
from .{{ attr.enum_type }}Enum import {{ attr.enum_type }}
{% endif %}
{% if attr.model_reference %}
from .{{ attr.model_reference }}Model import {{ attr.model_reference }}Model
{% endif %}
{% endfor %}

# Lambda Model
class {{ schema.name }}(BaseModel):
    """{{ schema.name }} lambda model."""
{% for attr in schema.attributes %}
    {{ attr.name | to_snake_case }}: {% if attr.enum_type %}str{% elif attr.model_reference %}{{ attr.model_reference }}{% else %}{% if attr.type == 'timestamp' %}datetime{% elif attr.type == 'boolean' %}bool{% elif attr.type == 'array' %}list[str]{% elif attr.type == 'number' %}float{% else %}str{% endif %}{% endif %}{% if not attr.required %} = Field(None, description="{{ attr.description }}"){% else %} = Field(..., description="{{ attr.description }}"){% endif %}
{% endfor %}

{% for attr in schema.attributes %}
{% if attr.type == 'timestamp' %}
    @validator('{{ attr.name }}', pre=True)
    def parse_{{ attr.name }}(cls, value):
        """Parse timestamp to ISO format."""
        if value is None:
            return None
        if isinstance(value, datetime):
            return value
        try:
            return datetime.fromisoformat(value.replace('Z', '+00:00'))
        except (ValueError, TypeError):
            return None
{% endif %}
{% if attr.type == 'boolean' %}
    @validator('{{ attr.name }}', pre=True, always=True)
    def parse_{{ attr.name }}_bool(cls, value):
        if value is None:
            return None
        if isinstance(value, bool):
            return value
        if isinstance(value, str):
            if value.lower() == 'true':
                return True
            if value.lower() == 'false':
                return False
        return bool(value)
{% endif %}
{% endfor %}

    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }