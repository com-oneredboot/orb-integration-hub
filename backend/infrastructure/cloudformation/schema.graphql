# AppSync GraphQL Schema - Generated Code
# Do NOT modify directly

# Common enums
enum ApplicationEnvironments @aws_api_key @aws_cognito_user_pools {
  DEVELOPMENT
  TESTING
  STAGING
  PRODUCTION
}

enum Status @aws_api_key @aws_cognito_user_pools {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

enum UserGroups @aws_api_key @aws_cognito_user_pools {
  UNKNOWN
  USER
  CUSTOMER
  CLIENT
  EMPLOYEE
  OWNER
}

# Model definitions 

# Model: Role
# GraphQL schema for Roles
# Generated from database model
# Do not modify directly

# Main Roles type
type Roles @aws_cognito_user_pools {
  role_id: string!
  user_id: string!
  application_id: string!
  role_name: string!
  role_type: string!
  permissions: array!
  created_at: number!
  updated_at: number!
  active: boolean!
}

# Response type for Roles operations
type RolesResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  item: Roles
}

# Response type for multiple Roles operations
type RolessResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  items: [Roles]
}

# Input for Roles creation
input RolesCreateInput {
  user_id: string!
  role_name: string!
  role_type: string!
  permissions: array!
  created_at: number!
  updated_at: number!
  active: boolean!
}

# Input for Roles query operations

input RolesQueryInput {

  role_id: String
  application_id: String
  user_id: string
  role_name: string
  role_type: string
  permissions: array
  created_at: number
  updated_at: number
  active: boolean
}

# Input for Roles update operations
input RolesUpdateInput {
  role_id: String!
  application_id: String!
  user_id: string
  role_name: string
  role_type: string
  permissions: array
  created_at: number
  updated_at: number
  active: boolean
}

# Operations for Roles
# These will be merged with the root Query and Mutation types in the base schema

extend type Query {
  rolesQueryById(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesQuery(input: RolesQueryInput): RolessResponse
    @aws_auth(cognito_groups: ["admin"])
}

extend type Mutation {
  rolesCreate(input: RolesCreateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesUpdate(id: ID!, input: RolesUpdateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesDelete(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
}


# Model: User
# GraphQL schema for Users
# Generated from database model
# Do not modify directly

# Main Users type
type Users @aws_cognito_user_pools {
  user_id: string!
  cognito_id: string!
  email: string!
  phone_number: string
  phone_verified: boolean
  first_name: string
  last_name: string
  groups: array!
  status: string!
  created_at: number!
  updated_at: number
}

# Response type for Users operations
type UsersResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  item: Users
}

# Response type for multiple Users operations
type UserssResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  items: [Users]
}

# Input for Users creation
input UsersCreateInput {
  cognito_id: string!
  email: string!
  phone_number: string
  phone_verified: boolean
  first_name: string
  last_name: string
  groups: array!
  status: string!
  created_at: number!
  updated_at: number
}

# Input for Users query operations

input UsersQueryInput {

  user_id: String
  cognito_id: string
  email: string
  phone_number: string
  phone_verified: boolean
  first_name: string
  last_name: string
  groups: array
  status: string
  created_at: number
  updated_at: number
}

# Input for Users update operations
input UsersUpdateInput {
  user_id: String!
  cognito_id: string
  email: string
  phone_number: string
  phone_verified: boolean
  first_name: string
  last_name: string
  groups: array
  status: string
  created_at: number
  updated_at: number
}

# Operations for Users
# These will be merged with the root Query and Mutation types in the base schema

extend type Query {
  usersQueryById(id: ID!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  usersQuery(input: UsersQueryInput): UserssResponse
    @aws_auth(cognito_groups: ["admin"])
}

extend type Mutation {
  usersCreate(input: UsersCreateInput!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  usersUpdate(id: ID!, input: UsersUpdateInput!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  usersDelete(id: ID!): UsersResponse
    @aws_auth(cognito_groups: ["admin"])
}


# Model: Application
# GraphQL schema for Applications
# Generated from database model
# Do not modify directly

# Main Applications type
type Applications @aws_cognito_user_pools {
  application_id: string!
  name: string!
  description: string
  status: string!
  created_at: number!
  updated_at: number
  user_id: string!
}

# Response type for Applications operations
type ApplicationsResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  item: Applications
}

# Response type for multiple Applications operations
type ApplicationssResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  items: [Applications]
}

# Input for Applications creation
input ApplicationsCreateInput {
  name: string!
  description: string
  status: string!
  created_at: number!
  updated_at: number
  user_id: string!
}

# Input for Applications query operations

input ApplicationsQueryInput {

  application_id: String
  name: string
  description: string
  status: string
  created_at: number
  updated_at: number
  user_id: string
}

# Input for Applications update operations
input ApplicationsUpdateInput {
  application_id: String!
  name: string
  description: string
  status: string
  created_at: number
  updated_at: number
  user_id: string
}

# Operations for Applications
# These will be merged with the root Query and Mutation types in the base schema

extend type Query {
  applicationsQueryById(id: ID!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  applicationsQuery(input: ApplicationsQueryInput): ApplicationssResponse
    @aws_auth(cognito_groups: ["admin"])
}

extend type Mutation {
  applicationsCreate(input: ApplicationsCreateInput!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  applicationsUpdate(id: ID!, input: ApplicationsUpdateInput!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
  
  applicationsDelete(id: ID!): ApplicationsResponse
    @aws_auth(cognito_groups: ["admin"])
}


# Model: Applicationuser
# GraphQL schema for ApplicationUsers
# Generated from database model
# Do not modify directly

# Main ApplicationUsers type
type ApplicationUsers @aws_cognito_user_pools {
  application_id: string!
  user_id: string!
  status: string!
  created_at: number!
  updated_at: number
}

# Response type for ApplicationUsers operations
type ApplicationUsersResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  item: ApplicationUsers
}

# Response type for multiple ApplicationUsers operations
type ApplicationUserssResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  items: [ApplicationUsers]
}

# Input for ApplicationUsers creation
input ApplicationUsersCreateInput {
  status: string!
  created_at: number!
  updated_at: number
}

# Input for ApplicationUsers query operations

input ApplicationUsersQueryInput {

  application_id: String
  user_id: String
  status: string
  created_at: number
  updated_at: number
}

# Input for ApplicationUsers update operations
input ApplicationUsersUpdateInput {
  application_id: String!
  user_id: String!
  status: string
  created_at: number
  updated_at: number
}

# Operations for ApplicationUsers
# These will be merged with the root Query and Mutation types in the base schema

extend type Query {
  application_usersQueryById(id: ID!): ApplicationUsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  application_usersQuery(input: ApplicationUsersQueryInput): ApplicationUserssResponse
    @aws_auth(cognito_groups: ["admin"])
}

extend type Mutation {
  application_usersCreate(input: ApplicationUsersCreateInput!): ApplicationUsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  application_usersUpdate(id: ID!, input: ApplicationUsersUpdateInput!): ApplicationUsersResponse
    @aws_auth(cognito_groups: ["admin"])
  
  application_usersDelete(id: ID!): ApplicationUsersResponse
    @aws_auth(cognito_groups: ["admin"])
}



# Nested complex types
type ApplicationRole @aws_api_key @aws_cognito_user_pools {
  name: String!
  description: String
}

type ApplicationEnvironmentRoles @aws_api_key @aws_cognito_user_pools {
  DEFAULT: [ApplicationRole!]!
  DEVELOPMENT: [ApplicationRole!]
  TESTING: [ApplicationRole!]
  STAGING: [ApplicationRole!]
  PRODUCTION: [ApplicationRole!]
}

type ApplicationSettings @aws_api_key @aws_cognito_user_pools {
  debug_level: String
}

type ApplicationEnvironmentSettings @aws_api_key @aws_cognito_user_pools {
  DEFAULT: ApplicationSettings!
  DEVELOPMENT: ApplicationSettings
  TESTING: ApplicationSettings
  STAGING: ApplicationSettings
  PRODUCTION: ApplicationSettings
}

# Base types
type Application @aws_api_key @aws_cognito_user_pools {
  application_id: String!
  user_id: String!
  status: String!
  name: String!
  description: String
  created_at: String!
  deleted_at: String
}

type ApplicationResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  application: Application
}

type ApplicationsResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  applications: [Application]
}

type ApplicationUser @aws_api_key @aws_cognito_user_pools {
  application_id: String!
  user_id: String!
  roles: ApplicationEnvironmentRoles!
  status: String!
  created_at: String!
  deleted_at: String
}

type ApplicationUserResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  application_user: ApplicationUser
}

type SMSVerificationResponse @aws_api_key @aws_cognito_user_pools {
  status_code: Float!
  message: String
  code: Float
}

# Input types
input ApplicationCreateInput {
  application_id: String!
  user_id: String!
  status: String!
  name: String!
  description: String
  created_at: String!
  settings: ApplicationSettingsInput!
  roles: ApplicationEnvironmentRolesInput!
}

input ApplicationQueryInput {
  application_id: String
  user_id: String
}

input ApplicationUpdateInput {
  application_id: String!
  status: String
  name: String
  description: String
  settings: ApplicationEnvironmentSettingsInput
  roles: ApplicationEnvironmentRolesInput
  deleted_at: String
}

input ApplicationRoleInput {
  name: String!
  description: String
}

input ApplicationEnvironmentRolesInput {
  DEFAULT: [ApplicationRoleInput!]!
  DEVELOPMENT: [ApplicationRoleInput!]
  TESTING: [ApplicationRoleInput!]
  STAGING: [ApplicationRoleInput!]
  PRODUCTION: [ApplicationRoleInput!]
}

input ApplicationSettingsInput {
  debug_level: String
}

input ApplicationEnvironmentSettingsInput {
  DEFAULT: ApplicationSettingsInput!
  DEVELOPMENT: ApplicationSettingsInput
  TESTING: ApplicationSettingsInput
  STAGING: ApplicationSettingsInput
  PRODUCTION: ApplicationSettingsInput
}

input ApplicationUserCreateInput {
  application_id: String!
  user_id: String!
  roles: ApplicationEnvironmentRolesInput!
  status: String!
  created_at: String!
}

input ApplicationUserQueryInput {
  application_id: String
  user_id: String
}

input ApplicationUserUpdateInput {
  application_id: String!
  user_id: String!
  status: String
  roles: ApplicationEnvironmentRolesInput
  deleted_at: String
}

input SMSVerificationInput {
  phone_number: String!
}

# Additional input types for legacy compatibility
# Note: These may be replaced by the model-generated types above

# Root types
type Query {
  # Base queries
  applicationQueryById(input: ApplicationQueryInput!): ApplicationResponse! @aws_cognito_user_pools
  applicationUserQueryById(input: ApplicationUserQueryInput!): ApplicationUserResponse! @aws_cognito_user_pools
  applicationQueryByUserId(input: ApplicationQueryInput!): ApplicationsResponse! @aws_cognito_user_pools
  
  # Generated model queries
  
  RoleQueryById(input: RoleQueryInput!): RoleResponse! @aws_cognito_user_pools
  
  UserQueryById(input: UserQueryInput!): UserResponse! @aws_cognito_user_pools
  
  ApplicationQueryById(input: ApplicationQueryInput!): ApplicationResponse! @aws_cognito_user_pools
  
  ApplicationuserQueryById(input: ApplicationuserQueryInput!): ApplicationuserResponse! @aws_cognito_user_pools
  
}

type Mutation {
  # Base mutations
  applicationCreate(input: ApplicationCreateInput!): ApplicationResponse! @aws_cognito_user_pools
  applicationUpdate(input: ApplicationUpdateInput!): ApplicationResponse! @aws_cognito_user_pools
  applicationUserCreate(input: ApplicationUserCreateInput!): ApplicationUserResponse! @aws_cognito_user_pools
  applicationUserUpdate(input: ApplicationUserUpdateInput!): ApplicationUserResponse! @aws_cognito_user_pools
  sendSMSVerificationCode(input: SMSVerificationInput!): SMSVerificationResponse! @aws_cognito_user_pools
  
  # Generated model mutations
  
  RoleCreate(input: RoleCreateInput!): RoleResponse! @aws_cognito_user_pools
  RoleUpdate(input: RoleUpdateInput!): RoleResponse! @aws_cognito_user_pools
  
  UserCreate(input: UserCreateInput!): UserResponse! @aws_cognito_user_pools
  UserUpdate(input: UserUpdateInput!): UserResponse! @aws_cognito_user_pools
  
  ApplicationCreate(input: ApplicationCreateInput!): ApplicationResponse! @aws_cognito_user_pools
  ApplicationUpdate(input: ApplicationUpdateInput!): ApplicationResponse! @aws_cognito_user_pools
  
  ApplicationuserCreate(input: ApplicationuserCreateInput!): ApplicationuserResponse! @aws_cognito_user_pools
  ApplicationuserUpdate(input: ApplicationuserUpdateInput!): ApplicationuserResponse! @aws_cognito_user_pools
  
}

schema {
  query: Query
  mutation: Mutation
}