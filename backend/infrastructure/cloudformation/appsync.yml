# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
  Application Infrastructure - AppSync Stack

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
  CustomerId:
    Default: orb
    Type: String
  ProjectId:
    Default: integration-hub
    Type: String
  TracingIs:
    Default: Active
    Type: String
  SchemaS3Key:
    Type: String
    Description: Name of the GraphQL schema file in S3

# --------------------------------------------------- #
Resources:
  # IAM Roles for AppSync
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/${CustomerId}/${ProjectId}/*'
  
  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  IntegrationHubApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Sub "{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id}}"
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false
  IntegrationHubApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Description: "API Key for unauthenticated access"
      Expires: 1767211838
  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync-graphql-key'
      Description: "AppSync API Key for unauthenticated access"
      SecretString: !GetAtt IntegrationHubApiKey.ApiKey
  IntegrationHubSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      DefinitionS3Location: !Sub
        - 's3://${ArtifactBucket}/${SchemaKey}'
        - ArtifactBucket: !Sub '${CustomerId}-${ProjectId}-build-templates'
          SchemaKey: !Ref SchemaS3Key
  # Data Sources
  ApplicationDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:/${Environment}/${CustomerId}/${ProjectId}/dynamodb/applications/table-name}}'
        AwsRegion: !Ref AWS::Region
  ApplicationUsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: ApplicationUsersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:/${Environment}/${CustomerId}/${ProjectId}/dynamodb/application_users/table-name}}'
        AwsRegion: !Ref AWS::Region
  SMSVerificationDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: SMSVerificationDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-sms-verification-lambda-arn}}'
  UsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: UsersDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:/${Environment}/${CustomerId}/${ProjectId}/dynamodb/users/table-name}}'
        AwsRegion: !Ref AWS::Region

  # Roles Data Source
  RolesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      Name: RolesDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Sub '{{resolve:ssm:/${Environment}/${CustomerId}/${ProjectId}/dynamodb/roles/table-name}}'
        AwsRegion: !Ref AWS::Region

  # --------------------------------------------------- #
  # Resolvers                                           #
  # --------------------------------------------------- #

  # Application Resolvers
  ApplicationCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: applicationCreate
      DataSourceName: !GetAtt ApplicationDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id)
          },
          "attributeValues": $util.toJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "message": "Application created successfully",
          "application": $ctx.args.input
        })
        
        $util.toJson($response)

  ApplicationQueryByIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: applicationQueryById
      DataSourceName: !GetAtt ApplicationDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.application_id)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id)
            }
          }
        #else
          $util.error("Invalid identifier. Must provide application_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "application": {}
        })
        
        #if($ctx.result)
          #if($ctx.result.items)
            #if($ctx.result.items.size() == 0)
              $util.qr($response.put("application", null))
            #else
              $util.qr($response.put("application", $ctx.result.items[0]))
            #end
          #else
            $util.qr($response.put("application", $ctx.result))
          #end
        #else
          $util.qr($response.put("application", null))
        #end
        
        $util.toJson($response)

  ApplicationQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: applicationQueryByUserId
      DataSourceName: !GetAtt ApplicationDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.user_id)
          {
            "version": "2017-02-28",
            "operation": "Query",
            "index": "user_id-index",
            "query": {
              "expression": "user_id = :userId",
              "expressionValues": {
                ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.user_id)
              }
            }
          }
        #else
          $util.error("Invalid identifier. Must provide user_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "applications": []
        })
        
        #if($ctx.result.items)
          $util.qr($response.put("applications", $ctx.result.items))
        #end
        
        $util.toJson($response)
  ApplicationUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: applicationUpdate
      DataSourceName: !GetAtt ApplicationDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id)
          },
          "attributeValues": $util.toJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "message": "Application updated successfully",
          "application": $ctx.args.input
        })
        
        $util.toJson($response)


  # ApplicationUser Resolvers
  ApplicationUserCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: applicationUserCreate
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id),
            "user_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.user_id)
          },
          "attributeValues": $util.toJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end

        #set($response = {
          "status_code": 200,
          "message": "Application User created successfully",
          "application_user": $ctx.args.input
        })

        $util.toJson($response)

  ApplicationUserQueryByIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: applicationUserQueryById
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.application_id && $ctx.args.input.user_id)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id),
              "user_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.user_id)
            }
          }
        #else
          $util.error("Invalid combination of identifiers. Must provide application_id and user_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end

        #set($response = {
          "status_code": 200,
          "application_user": {}
        })

        #if($ctx.result)
          #if($ctx.result.items)
            #if($ctx.result.items.size() == 0)
              $util.qr($response.put("application_user", null))
            #else
              $util.qr($response.put("application_user", $ctx.result.items[0]))
            #end
          #else
            $util.qr($response.put("application_user", $ctx.result))
          #end
        #else
          $util.qr($response.put("application_user", null))
        #end

        $util.toJson($response)

  ApplicationUserUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: applicationUserUpdate
      DataSourceName: !GetAtt ApplicationUsersDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "application_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id),
            "user_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.user_id)
          },
          "attributeValues": $util.toJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end

        #set($response = {
          "status_code": 200,
          "message": "Application User updated successfully",
          "application_user": $ctx.args.input
        })

        $util.toJson($response)

  # User Resolvers
  UserCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: userCreate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        ## Simplified UserCreateResolver
        #set($input = $ctx.args.input)
        #set($now = $util.time.nowISO8601())
        
        ## Create a clean map of attributes
        #set($attributeValues = {
          "user_id": $input.user_id,
          "cognito_id": $input.cognito_id,
          "email": $input.email,
          "groups": $input.groups,
          "status": $input.status,
          "created_at": $now
        })
        
        ## Conditionally add optional attributes if present
        #if($util.isString($input.first_name)) 
          $util.qr($attributeValues.put("first_name", $input.first_name))
        #end
        #if($util.isString($input.last_name))
          $util.qr($attributeValues.put("last_name", $input.last_name))
        #end
        #if($util.isString($input.phone_number))
          $util.qr($attributeValues.put("phone_number", $input.phone_number))
        #end
        
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "user_id": $util.dynamodb.toDynamoDBJson($input.user_id)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($attributeValues)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        ## Return a properly structured response
        {
          "status_code": 200,
          "message": "User created successfully",
          "user": $util.toJson($ctx.args.input)
        }


  UserQueryByIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: userQueryById
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        #set($ids = {})
        #if($ctx.args.input.user_id)
          $util.qr($ids.put("user_id", $ctx.args.input.user_id))
        #end
        #if($ctx.args.input.cognito_id && !$ids.id)
          $util.qr($ids.put("cognito_id", $ctx.args.input.cognito_id))
        #end
        #if($ctx.args.input.email && !$ids.id && !$ids.cognito_id)
          $util.qr($ids.put("email", $ctx.args.input.email))
        #end
        
        #if($ids.isEmpty())
          $util.error("At least one identifier (user_id, cognito_id, or email) must be provided")
        #end
        
        #if($ids.user_id)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "user_id": $util.dynamodb.toDynamoDBJson($ids.user_id)
            }
          }
        #elseif($ids.cognito_id)
          {
            "version": "2017-02-28",
            "operation": "Query",
            "index": "cognito_id-index",
            "query": {
              "expression": "cognito_id = :cognitoId",
              "expressionValues": {
                ":cognitoId": $util.dynamodb.toDynamoDBJson($ids.cognito_id)
              }
            }
          }
        #else
          {
            "version": "2017-02-28",
            "operation": "Query",
            "index": "email-index",
            "query": {
              "expression": "email = :email",
              "expressionValues": {
                ":email": $util.dynamodb.toDynamoDBJson($ids.email)
              }
            }
          }
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "user": {}
        })
        
        #if($ctx.result.items)
          #if($ctx.result.items.size() == 0)
            #set($response.status_code = 404)
            $util.qr($response.put("user", null))
          #else
            #set($response.user = $ctx.result.items[0])
          #end
        #else
          #if($ctx.result)
            #set($response.user = $ctx.result)
          #else
            #set($response.status_code = 404)
            $util.qr($response.put("user", null))
          #end
        #end
        
        $util.toJson($response)


  UserUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: userUpdate
      DataSourceName: !GetAtt UsersDataSource.Name
      RequestMappingTemplate: |
        ## Follow the DynamoDB resolver standards for update operations
        #set($input = $ctx.args.input)
        #set($now = $util.time.nowISO8601())
        
        ## First, ensure the user_id is provided (required)
        #if(!$input.user_id)
          $util.error("user_id is a required field for user updates")
        #end
        
        ## Build update expression and values map
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        ## Helper function to add an attribute to the update expression
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          ## Skip the primary key
          #if($field != "user_id")
            ## Add the field to the update expression
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        ## If there are no fields to update, return early
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        ## Add the updated_at timestamp
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        ## Build the update expression
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "user_id": $util.dynamodb.toDynamoDBJson($input.user_id)
          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }

      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        ## Return a properly structured response
        {
          "status_code": 200,
          "message": "User updated successfully",
          "user_id": $util.toJson($ctx.args.input.user_id)
        }

  # Role Resolvers
  RoleCreateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: roleCreate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "role_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.role_id)
          },
          "attributeValues": $util.toJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "message": "Role created successfully",
          "role": $ctx.args.input
        })
        
        $util.toJson($response)

  RoleQueryByIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: roleQueryById
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.role_id)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "role_id": $util.dynamodb.toDynamoDBJson($ctx.args.input.role_id)
            }
          }
        #else
          $util.error("Invalid identifier. Must provide role_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "role": {}
        })
        
        #if($ctx.result)
          #if($ctx.result.items)
            #if($ctx.result.items.size() == 0)
              $util.qr($response.put("role", null))
            #else
              $util.qr($response.put("role", $ctx.result.items[0]))
            #end
          #else
            $util.qr($response.put("role", $ctx.result))
          #end
        #else
          $util.qr($response.put("role", null))
        #end
        
        $util.toJson($response)

  RoleQueryByUserIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: roleQueryByUserId
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.user_id)
          {
            "version": "2017-02-28",
            "operation": "Query",
            "index": "user-role-index",
            "query": {
              "expression": "user_id = :userId",
              "expressionValues": {
                ":userId": $util.dynamodb.toDynamoDBJson($ctx.args.input.user_id)
              }
            }
          }
        #else
          $util.error("Invalid identifier. Must provide user_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "roles": []
        })
        
        #if($ctx.result.items)
          $util.qr($response.put("roles", $ctx.result.items))
        #end
        
        $util.toJson($response)

  RoleQueryByApplicationIdResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Query
      FieldName: roleQueryByApplicationId
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #if($ctx.args.input.application_id)
          {
            "version": "2017-02-28",
            "operation": "Query",
            "index": "application-role-index",
            "query": {
              "expression": "application_id = :applicationId",
              "expressionValues": {
                ":applicationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.application_id)
              }
            }
          }
        #else
          $util.error("Invalid identifier. Must provide application_id")
        #end
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        #set($response = {
          "status_code": 200,
          "roles": []
        })
        
        #if($ctx.result.items)
          $util.qr($response.put("roles", $ctx.result.items))
        #end
        
        $util.toJson($response)

  RoleUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: roleUpdate
      DataSourceName: !GetAtt RolesDataSource.Name
      RequestMappingTemplate: |
        #set($input = $ctx.args.input)
        #set($now = $util.time.nowISO8601())
        
        #if(!$input.role_id)
          $util.error("role_id is a required field for role updates")
        #end
        
        #set($expNames = {})
        #set($expValues = {})
        #set($expSet = [])
        
        #set($updateCount = 0)
        #foreach($field in $input.keySet())
          #if($field != "role_id")
            $util.qr($expNames.put("#$field", "$field"))
            $util.qr($expValues.put(":$field", $util.dynamodb.toDynamoDB($input.get($field))))
            $util.qr($expSet.add("#$field = :$field"))
            #set($updateCount = $updateCount + 1)
          #end
        #end
        
        #if($updateCount == 0)
          $util.error("No fields to update were provided")
        #end
        
        $util.qr($expNames.put("#updated_at", "updated_at"))
        $util.qr($expValues.put(":updated_at", $util.dynamodb.toDynamoDB($now)))
        $util.qr($expSet.add("#updated_at = :updated_at"))
        
        #set($expression = "SET " + $expSet.join(", "))
        
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "role_id": $util.dynamodb.toDynamoDBJson($input.role_id)
          },
          "update": {
            "expression": "$expression",
            "expressionNames": $util.toJson($expNames),
            "expressionValues": $util.toJson($expValues)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        {
          "status_code": 200,
          "message": "Role updated successfully",
          "role_id": $util.toJson($ctx.args.input.role_id)
        }

  # SMS Verification Resolver
  SMSVerificationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: IntegrationHubSchema
    Properties:
      ApiId: !GetAtt IntegrationHubApi.ApiId
      TypeName: Mutation
      FieldName: sendSMSVerificationCode
      DataSourceName: !GetAtt SMSVerificationDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "input": $util.toJson($ctx.args.input)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        
        ## Return the Lambda response directly
        $util.toJson($ctx.result)

# --------------------------------------------------- #
Outputs:
  GraphQLApiUrl:
    Description: 'URL of the AppSync GraphQL API'
    Value: !GetAtt IntegrationHubApi.GraphQLUrl
  GraphQLApiKeySecretName:
    Description: 'Name of the Secret containing the AppSync API Key'
    Value: !Ref ApiKeySecret
