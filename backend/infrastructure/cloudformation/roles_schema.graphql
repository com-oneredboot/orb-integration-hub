# GraphQL schema for Roles
# Generated from database model
# Do not modify directly

# Main Roles type
type Roles @aws_cognito_user_pools {
  role_id: string!
  user_id: string!
  application_id: string!
  role_name: string!
  role_type: string!
  permissions: array!
  created_at: number!
  updated_at: number!
  active: boolean!
}

# Response type for Roles operations
type RolesResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  item: Roles
}

# Response type for multiple Roles operations
type RolessResponse @aws_cognito_user_pools {
  status_code: Float!
  message: String
  items: [Roles]
}

# Input for Roles creation
input RolesCreateInput {
  user_id: string!
  role_name: string!
  role_type: string!
  permissions: array!
  created_at: number!
  updated_at: number!
  active: boolean!
}

# Input for Roles query operations

input RolesQueryInput {

  role_id: String
  application_id: String
  user_id: string
  role_name: string
  role_type: string
  permissions: array
  created_at: number
  updated_at: number
  active: boolean
}

# Input for Roles update operations
input RolesUpdateInput {
  role_id: String!
  application_id: String!
  user_id: string
  role_name: string
  role_type: string
  permissions: array
  created_at: number
  updated_at: number
  active: boolean
}

# Operations for Roles
# These will be merged with the root Query and Mutation types in the base schema

extend type Query {
  rolesQueryById(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesQuery(input: RolesQueryInput): RolessResponse
    @aws_auth(cognito_groups: ["admin"])
}

extend type Mutation {
  rolesCreate(input: RolesCreateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesUpdate(id: ID!, input: RolesUpdateInput!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
  
  rolesDelete(id: ID!): RolesResponse
    @aws_auth(cognito_groups: ["admin"])
}