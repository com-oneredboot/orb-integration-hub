name: orb-common-package

on:
  push:
    branches: [ main, develop, organizations-feature ]
    paths:
      - 'backend/packages/orb-common/**'
      - '.github/workflows/orb-common-package.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/packages/orb-common/**'
      - '.github/workflows/orb-common-package.yml'
  workflow_dispatch:

jobs:
  test:
    name: Test Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          cd backend/packages/orb-common
          python -m pip install --upgrade pip
          pip install -e .[test]
          pip install pytest pytest-cov black isort mypy bandit safety
      
      - name: Lint with black and isort
        run: |
          cd backend/packages/orb-common
          black --check .
          isort --check-only .
      
      - name: Type check with mypy
        run: |
          cd backend/packages/orb-common
          mypy orb_common --ignore-missing-imports
      
      - name: Security check with bandit
        run: |
          cd backend/packages/orb-common
          bandit -r orb_common -ll
      
      - name: Check dependencies with safety
        run: |
          cd backend/packages/orb-common
          safety check || true  # Don't fail build on vulnerabilities, just report
      
      - name: Run tests
        run: |
          cd backend/packages/orb-common
          pytest tests/ -v --cov=orb_common --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/packages/orb-common/coverage.xml
          flags: orb-common
          name: orb-common-${{ matrix.python-version }}

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Determine version
        id: version
        run: |
          cd backend/packages/orb-common
          # Extract version from __init__.py
          VERSION=$(python -c "exec(open('orb_common/__init__.py').read()); print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"
      
      - name: Build package
        run: |
          cd backend/packages/orb-common
          python -m build
      
      - name: Check package
        run: |
          cd backend/packages/orb-common
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: orb-common-dist
          path: backend/packages/orb-common/dist/

  test-install:
    name: Test Installation
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: orb-common-dist
          path: dist/
      
      - name: Install from wheel
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl
      
      - name: Test import
        run: |
          python -c "import orb_common; print(f'Successfully imported orb_common {orb_common.__version__}')"
          python -c "from orb_common import OrbError, AuthenticationError, get_audit_logger"
      
      - name: Run simple functionality test
        run: |
          cat > test_install.py << 'EOF'
          from orb_common import OrbError, AuthenticationError
          from orb_common.audit import get_audit_logger
          
          # Test exception hierarchy
          try:
              raise AuthenticationError("Test error")
          except OrbError as e:
              print(f"Caught OrbError: {e}")
          
          # Test audit logger creation
          logger = get_audit_logger("test-service")
          print(f"Created audit logger for: {logger.entity_type}")
          
          print("All tests passed!")
          EOF
          
          python test_install.py

  # Store build artifacts for internal use
  store-artifacts:
    name: Store Build Artifacts
    needs: [build, test-install]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: orb-common-dist
          path: dist/
      
      - name: Upload artifacts for long-term storage
        uses: actions/upload-artifact@v3
        with:
          name: orb-common-${{ github.sha }}
          path: dist/
          retention-days: 90
      
      - name: Create artifact summary
        run: |
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Package artifacts have been stored for internal use." >> $GITHUB_STEP_SUMMARY
          echo "SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          ls -la dist/ >> $GITHUB_STEP_SUMMARY