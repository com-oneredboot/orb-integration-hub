name: comprehensive-testing

permissions:
  contents: read
  security-events: write

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - e2e
          - integration
          - performance
          - security
      environment:
        description: 'Test environment'
        required: false
        default: 'ci'
        type: choice
        options:
          - ci
          - staging
          - production

env:
  NODE_VERSION: '20.19.0'
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Setup and validation
  setup:
    name: Setup and Validate Environment
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      test-type: ${{ steps.test-config.outputs.test-type }}
      run-security: ${{ steps.test-config.outputs.run-security }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      - name: Configure test execution
        id: test-config
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type || 'all' }}"
          echo "test-type=$TEST_TYPE" >> $GITHUB_OUTPUT
          
          # Always run security tests on main branch or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run-security=true" >> $GITHUB_OUTPUT
          else
            echo "run-security=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate package.json
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
          npm ls --depth=0

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.test-type == 'all' ||
      needs.setup.outputs.test-type == 'unit' ||
      needs.setup.outputs.frontend-changed == 'true'
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install dependencies (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Run linting (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run lint

      - name: Run linting (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          pipenv run flake8 src/ --max-line-length=100
          pipenv run black --check src/
          pipenv run isort --check-only src/

      - name: Run unit tests (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Run unit tests (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          pipenv run python -m pytest src/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.component == 'frontend' && 'frontend/coverage/lcov.info' || 'backend/coverage.xml' }}
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: |
      needs.setup.outputs.test-type == 'all' ||
      needs.setup.outputs.test-type == 'integration'
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: cognito-idp,dynamodb,sns,secretsmanager
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:4566/_localstack/health | grep -q "\"dynamodb\": \"available\""; do sleep 2; done'

      - name: Setup test environment
        env:
          TEST_AWS_ENDPOINT: http://localhost:4566
          TEST_AWS_REGION: us-east-1
          TEST_AWS_ACCESS_KEY_ID: test
          TEST_AWS_SECRET_ACCESS_KEY: test
        run: |
          cd frontend
          # Setup LocalStack resources
          aws --endpoint-url=http://localhost:4566 cognito-idp create-user-pool --pool-name test-pool --region us-east-1
          aws --endpoint-url=http://localhost:4566 dynamodb create-table --table-name test-users --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST --region us-east-1

      - name: Run GraphQL integration tests
        env:
          TEST_AWS_ENDPOINT: http://localhost:4566
          TEST_AWS_REGION: us-east-1
        run: |
          cd frontend
          npm run test:integration:graphql

      - name: Run Cognito integration tests
        env:
          TEST_AWS_ENDPOINT: http://localhost:4566
          TEST_AWS_REGION: us-east-1
        run: |
          cd frontend
          npm run test:integration:cognito

      - name: Run SMS integration tests
        env:
          TEST_AWS_ENDPOINT: http://localhost:4566
          TEST_AWS_REGION: us-east-1
        run: |
          cd frontend
          npm run test:integration:sms

      - name: Run contract tests
        run: |
          cd frontend
          npm run test:contracts

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            frontend/coverage/integration/
            frontend/integration-tests/pacts/
            frontend/integration-tests/logs/

  # Job 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: |
      needs.setup.outputs.test-type == 'all' ||
      needs.setup.outputs.test-type == 'e2e'
    strategy:
      matrix:
        browser: [chrome, firefox]
        viewport: [desktop, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Start application server
        run: |
          cd frontend
          npm start &
          echo $! > app.pid
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -s http://localhost:4200 > /dev/null; do sleep 2; done'

      - name: Run Cypress E2E tests
        env:
          CYPRESS_BROWSER: ${{ matrix.browser }}
          CYPRESS_VIEWPORT: ${{ matrix.viewport }}
        run: |
          cd frontend
          npm run test:e2e:headless -- --browser ${{ matrix.browser }}

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts-${{ matrix.browser }}-${{ matrix.viewport }}
          path: |
            frontend/cypress/screenshots/
            frontend/cypress/videos/

      - name: Stop application server
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
          fi

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: |
      needs.setup.outputs.test-type == 'all' ||
      needs.setup.outputs.test-type == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build application for performance testing
        run: |
          cd frontend
          npm run build -- --configuration production

      - name: Start application server
        run: |
          cd frontend
          npx serve dist/ -p 4200 &
          echo $! > app.pid
          timeout 60 bash -c 'until curl -s http://localhost:4200 > /dev/null; do sleep 2; done'

      - name: Run Lighthouse performance audit
        run: |
          cd frontend
          npm run perf:lighthouse
          npm run perf:lighthouse:mobile

      - name: Run load testing with Artillery
        run: |
          cd frontend
          npm run perf:load

      - name: Run memory leak detection
        run: |
          cd frontend
          npm run perf:memory

      - name: Run mobile performance tests
        run: |
          cd frontend
          npm run perf:mobile

      - name: Run network throttling tests
        run: |
          cd frontend
          npm run perf:network

      - name: Generate performance baseline
        run: |
          cd frontend
          npm run perf:baseline

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            frontend/performance-tests/reports/
            frontend/performance-tests/baseline/

      - name: Stop application server
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
          fi

  # Job 6: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: needs.setup.outputs.run-security == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (Frontend)
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install dependencies (Backend)
        run: |
          cd backend
          pip install pipenv
          pipenv install --dev

      - name: Run frontend security tests
        run: |
          cd frontend
          # Run Angular-specific security tests
          npm audit --audit-level moderate
          # Run OWASP dependency check
          npx audit-ci --moderate

      - name: Run backend security tests
        run: |
          cd backend
          # Run Python security tests
          pipenv install safety bandit
          pipenv run safety check
          pipenv run bandit -r src/ -f json -o security-report.json

      - name: Run SAST with CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run comprehensive penetration tests
        run: |
          cd frontend
          # Run custom security integration tests
          npm run test -- --testNamePattern="Security|OWASP|Penetration" --watch=false

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/security-report.json
            frontend/audit-results.json

  # Job 7: Test Summary and Reporting
  test-summary:
    name: Test Summary and Reporting
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive test report
        run: |
          echo "# Comprehensive Test Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results Overview" >> test-summary.md
          echo "" >> test-summary.md
          
          # Unit Tests
          echo "### Unit Tests" >> test-summary.md
          echo "- Frontend: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Backend: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # Integration Tests
          echo "### Integration Tests" >> test-summary.md
          echo "- Status: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # E2E Tests
          echo "### End-to-End Tests" >> test-summary.md
          echo "- Status: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # Performance Tests
          echo "### Performance Tests" >> test-summary.md
          echo "- Status: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # Security Tests
          echo "### Security Tests" >> test-summary.md
          echo "- Status: ${{ needs.security-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## Artifacts Generated" >> test-summary.md
          echo "- Unit test coverage reports" >> test-summary.md
          echo "- Integration test results" >> test-summary.md
          echo "- E2E test screenshots and videos" >> test-summary.md
          echo "- Performance benchmarks and reports" >> test-summary.md
          echo "- Security audit reports" >> test-summary.md
          echo "" >> test-summary.md

      - name: Comment PR with test summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload final test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md

      - name: Set job status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.integration-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.performance-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.security-tests.result }}" == "failure" ]]; then
            echo "One or more test jobs failed"
            exit 1
          else
            echo "All tests passed successfully!"
          fi