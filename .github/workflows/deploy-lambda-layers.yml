name: deploy-lambda-layers

permissions:
  contents: read
  security-events: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: environment
      region:
        description: 'AWS Region'
        required: true
        type: choice
        options:
          - 'us-east-1'
      customer_id:
        description: 'Customer ID'
        required: true
        type: string
        default: 'orb'
      project_id:
        description: 'Project ID'
        required: true
        type: string
        default: 'integration-hub'
      deploy_organizations_security:
        description: 'organizations_security'
        required: false
        type: boolean
        default: false
      deploy_stripe:
        description: 'stripe'
        required: false
        type: boolean
        default: false
      deploy_users_security:
        description: 'users_security'
        required: false
        type: boolean
        default: false

jobs:
  # Build and deploy selected layers
  deploy-layers:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pipenv

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.region }}

    - name: Determine layers to build
      id: determine-layers
      run: |
        # Initialize empty array
        LAYERS=""
        
        # Check if deploy_all is true
        if [ "${{ inputs.deploy_all }}" == "true" ]; then
          LAYERS="organizations_security,stripe,users_security"
        else
          # Build layers list based on individual selections
          if [ "${{ inputs.deploy_organizations_security }}" == "true" ]; then
            LAYERS="${LAYERS}organizations_security,"
          fi
          if [ "${{ inputs.deploy_stripe }}" == "true" ]; then
            LAYERS="${LAYERS}stripe,"
          fi
          if [ "${{ inputs.deploy_users_security }}" == "true" ]; then
            LAYERS="${LAYERS}users_security,"
          fi
          
          # Remove trailing comma
          LAYERS="${LAYERS%,}"
        fi
        
        # Check if any layers were selected
        if [ -z "$LAYERS" ]; then
          echo "No layers selected for deployment"
          echo "layers_to_build=[]" >> $GITHUB_OUTPUT
          echo "has_layers=false" >> $GITHUB_OUTPUT
        else
          # Convert comma-separated string to JSON array
          LAYERS_JSON=$(echo "$LAYERS" | jq -R -s -c 'split(",") | map(select(length > 0))')
          echo "layers_to_build=$LAYERS_JSON" >> $GITHUB_OUTPUT
          echo "has_layers=true" >> $GITHUB_OUTPUT
          echo "Layers to build: $LAYERS_JSON"
        fi

    - name: Build and Deploy Layers
      if: steps.determine-layers.outputs.has_layers == 'true'
      run: |
        # Get the layers array
        LAYERS='${{ steps.determine-layers.outputs.layers_to_build }}'
        
        # Debug: Show the layers array
        echo "Layers JSON: $LAYERS"
        
        # Parse JSON array and iterate through layers
        for layer in $(echo "$LAYERS" | jq -r '.[]'); do
          # Skip empty values
          if [ -z "$layer" ] || [ "$layer" == "null" ]; then
            echo "Skipping empty layer value"
            continue
          fi
          
          echo "Processing layer: $layer"
          
          # Build the layer
          echo "Building $layer Layer"
          chmod +x build_layer.sh
          ./build_layer.sh "$layer"
          
          # Deploy the layer
          echo "Deploying $layer layer"
          
          # Get the stack name for this specific layer
          LAYER_STACK_NAME="${{ inputs.customer_id }}-${{ inputs.project_id }}-${{ inputs.environment }}-${layer}-layer"
          LAYER_STACK_NAME="${LAYER_STACK_NAME//_/-}"  # Replace underscores with hyphens
          
          # Get the template file name for this layer
          TEMPLATE_NAME="lambda-layer-${layer}.yml"
          TEMPLATE_NAME="${TEMPLATE_NAME//_/-}"  # Replace underscores with hyphens
          
          echo "Using template: $TEMPLATE_NAME"
          echo "Stack name: $LAYER_STACK_NAME"
          
          # Change to CloudFormation directory
          pushd ../../../infrastructure/cloudformation
          
          # Verify template exists
          if [ ! -f "$TEMPLATE_NAME" ]; then
            echo "Error: Template file not found: $TEMPLATE_NAME"
            popd
            exit 1
          fi
          
          # Build the layer
          sam build \
            --template-file $TEMPLATE_NAME
          
          # Package the layer
          sam package \
            --template-file .aws-sam/build/template.yaml \
            --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
            --s3-prefix sam-builds/layers \
            --output-template-file ${TEMPLATE_NAME%.yml}-packaged.yml
          
          # Deploy only this specific layer
          sam deploy \
            --template-file ${TEMPLATE_NAME%.yml}-packaged.yml \
            --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
            --stack-name $LAYER_STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --force-upload \
            --parameter-overrides \
              CustomerId=${{ inputs.customer_id }} \
              ProjectId=${{ inputs.project_id }} \
              Environment=${{ inputs.environment }}
          
          # Store the packaged template
          aws s3 cp ${TEMPLATE_NAME%.yml}-packaged.yml \
            s3://${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts/templates/layers/
          
          popd
        done
      working-directory: backend/src/layers

  # Optional: Summary job
  deployment-summary:
    needs: deploy-layers
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## Lambda Layers Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Customer**: ${{ inputs.customer_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ inputs.project_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Display selected layers
        echo "### Selected Layers:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.deploy_all }}" == "true" ]; then
          echo "- ✅ All layers" >> $GITHUB_STEP_SUMMARY
        else
          [ "${{ inputs.deploy_organizations_security }}" == "true" ] && echo "- ✅ organizations_security" >> $GITHUB_STEP_SUMMARY
          [ "${{ inputs.deploy_stripe }}" == "true" ] && echo "- ✅ stripe" >> $GITHUB_STEP_SUMMARY
          [ "${{ inputs.deploy_users_security }}" == "true" ] && echo "- ✅ users_security" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-layers.result }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-layers.result }}" == "skipped" ]; then
          echo "⏭️ **Status**: No layers selected for deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi