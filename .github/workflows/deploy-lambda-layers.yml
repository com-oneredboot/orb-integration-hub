name: deploy-lambda-layers

permissions:
  contents: read
  security-events: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: environment
      region:
        description: 'AWS Region'
        required: true
        type: choice
        options:
          - 'us-east-1'
      customer_id:
        description: 'Customer ID'
        required: true
        type: string
        default: 'orb'
      project_id:
        description: 'Project ID'
        required: true
        type: string
        default: 'integration-hub'

jobs:
  # First job: Check which layers have changed
  check-layer-changes:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      layers_to_build: ${{ steps.check-changes.outputs.layers_to_build }}
      any_changes: ${{ steps.check-changes.outputs.any_changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.region }}

    - name: Check Layer Changes
      id: check-changes
      run: |
        chmod +x check_layer_changes.sh
        ./check_layer_changes.sh ${{ inputs.customer_id }} ${{ inputs.project_id }}
      working-directory: backend/src/layers

  # Second job: Deploy all layers in single stack
  deploy-layers-stack:
    needs: check-layer-changes
    if: needs.check-layer-changes.outputs.any_changes == 'true'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pipenv

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy Lambda Layers Stack
      run: |
        echo "Deploying lambda layers stack with changes: ${{ needs.check-layer-changes.outputs.layers_to_build }}"
        
        # Get the stack name
        STACK_NAME="${{ inputs.customer_id }}-${{ inputs.project_id }}-${{ inputs.environment }}-lambda-layers"
        
        # Build the SAM application
        sam build \
          --template-file lambda-layers.yml
        
        # Package the layers
        sam package \
          --template-file .aws-sam/build/template.yaml \
          --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
          --output-template-file lambda-layers-packaged.yml
        
        # Deploy the entire layers stack
        sam deploy \
          --template-file lambda-layers-packaged.yml \
          --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            CustomerId=${{ inputs.customer_id }} \
            ProjectId=${{ inputs.project_id }} \
            Environment=${{ inputs.environment }}
        
        # Store the packaged template
        aws s3 cp lambda-layers-packaged.yml \
          s3://${{ inputs.customer_id }}-${{ inputs.project_id }}-build-templates/lambda-layers-packaged.yml
      working-directory: infrastructure/cloudformation

  # Third job: Update hashes after successful deployment
  update-layer-hashes:
    needs: [check-layer-changes, deploy-layers-stack]
    if: needs.check-layer-changes.outputs.any_changes == 'true'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update Layer Hashes
      run: |
        chmod +x update_layer_hashes.sh
        ./update_layer_hashes.sh \
          ${{ inputs.customer_id }} \
          ${{ inputs.project_id }} \
          '${{ needs.check-layer-changes.outputs.layers_to_build }}'
      working-directory: backend/src/layers