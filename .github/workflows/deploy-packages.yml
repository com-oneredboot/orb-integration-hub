name: deploy-packages

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        type: boolean
        default: false

jobs:
  detect-changes:
    name: Detect Package Changes
    runs-on: ubuntu-latest
    outputs:
      common-changed: ${{ steps.changes.outputs.common }}
      models-changed: ${{ steps.changes.outputs.models }}
      schemas-changed: ${{ steps.changes.outputs.schemas }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            common:
              - 'backend/packages/orb-common/**'
            models:
              - 'backend/packages/orb-models/**'
            schemas:
              - 'schemas/**'
      
      - name: Display detected changes
        run: |
          echo "Common changed: ${{ steps.changes.outputs.common }}"
          echo "Models changed: ${{ steps.changes.outputs.models }}"
          echo "Schemas changed: ${{ steps.changes.outputs.schemas }}"

  # Test and build orb-common first
  test-common:
    name: Test ORB Common
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.common-changed == 'true' &&
      inputs.skip_tests != true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          cd backend/packages/orb-common
          pip install pipenv
          pipenv install --dev
          pipenv install -e .
      
      - name: Lint with black and isort
        run: |
          cd backend/packages/orb-common
          pipenv run black --check .
          pipenv run isort --check-only . --diff
      
      - name: Type check with mypy
        run: |
          cd backend/packages/orb-common
          pipenv run mypy orb_common --ignore-missing-imports
      
      - name: Security check with bandit
        run: |
          cd backend/packages/orb-common
          pipenv install bandit --dev
          pipenv run bandit -r orb_common -f json -o bandit-report.json || true
      
      - name: Run tests
        run: |
          cd backend/packages/orb-common
          pipenv run pytest tests/ -v --cov=orb_common --cov-report=xml --cov-report=html

  build-common:
    name: Build ORB Common
    needs: [detect-changes, test-common]
    if: |
      needs.detect-changes.outputs.common-changed == 'true' &&
      (needs.test-common.result == 'success' || needs.test-common.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install build tools
        run: |
          cd backend/packages/orb-common
          pip install pipenv
          pipenv install --dev
          pipenv install build twine
      
      - name: Build package
        run: |
          cd backend/packages/orb-common
          # Clean any existing build artifacts
          rm -rf dist/ build/ *.egg-info/
          # Ensure we have latest setuptools
          pipenv run pip install --upgrade setuptools wheel
          pipenv run python -m build
      
      - name: Check package
        run: |
          cd backend/packages/orb-common
          pipenv run twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orb-common-dist
          path: backend/packages/orb-common/dist/

  # Publish orb-common to CodeArtifact BEFORE testing models
  publish-common:
    name: Publish ORB Common to CodeArtifact
    needs: [build-common]
    if: needs.build-common.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Get CodeArtifact configuration
        id: codeartifact
        run: |
          # Get domain and repository from SSM parameters
          DOMAIN=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/domain" --query 'Parameter.Value' --output text 2>/dev/null || echo "orb-integration-hub")
          REPOSITORY=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/repository" --query 'Parameter.Value' --output text 2>/dev/null || echo "${{ inputs.environment }}-python-packages")
          
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          
          # Get repository endpoint
          REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint \
            --domain $DOMAIN \
            --repository $REPOSITORY \
            --format pypi \
            --query repositoryEndpoint \
            --output text)
          
          # Get authorization token
          AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain $DOMAIN \
            --query authorizationToken \
            --output text)
          
          echo "::add-mask::$AUTH_TOKEN"
          echo "repository_endpoint=$REPOSITORY_ENDPOINT" >> $GITHUB_OUTPUT
          echo "auth_token=$AUTH_TOKEN" >> $GITHUB_OUTPUT
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: orb-common-dist
          path: ./dist
      
      - name: Install twine
        run: pip install twine
      
      - name: Debug wheel metadata
        run: |
          echo "=== Listing dist contents ==="
          ls -la dist/
          echo "=== Checking wheel contents ==="
          unzip -l dist/*.whl | head -20
          echo "=== Extracting METADATA file ==="
          unzip -p dist/*.whl '*/METADATA' | head -50
          echo "=== Checking for license-file in METADATA ==="
          unzip -p dist/*.whl '*/METADATA' | grep -i "license" || true
      
      - name: Publish to CodeArtifact
        env:
          TWINE_USERNAME: aws
          TWINE_PASSWORD: ${{ steps.codeartifact.outputs.auth_token }}
          TWINE_REPOSITORY_URL: ${{ steps.codeartifact.outputs.repository_endpoint }}
        run: |
          echo "Publishing to CodeArtifact repository: ${{ steps.codeartifact.outputs.repository }}"
          twine upload dist/* --verbose

  # Now test and build models AFTER common is published
  test-models:
    name: Test ORB Models
    needs: [detect-changes, publish-common]
    if: |
      (needs.detect-changes.outputs.models-changed == 'true' ||
       needs.detect-changes.outputs.schemas-changed == 'true') &&
      inputs.skip_tests != true
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Configure CodeArtifact
        run: |
          # Get CodeArtifact configuration
          DOMAIN=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/domain" --query 'Parameter.Value' --output text 2>/dev/null || echo "orb-integration-hub")
          REPOSITORY=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/repository" --query 'Parameter.Value' --output text 2>/dev/null || echo "${{ inputs.environment }}-python-packages")
          
          # Get authorization token
          AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $DOMAIN --query authorizationToken --output text)
          
          # Get repository endpoint
          REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint --domain $DOMAIN --repository $REPOSITORY --format pypi --query repositoryEndpoint --output text)
          
          # Configure pip to use CodeArtifact
          export PIP_INDEX_URL="https://aws:${AUTH_TOKEN}@${REPOSITORY_ENDPOINT#https://}simple/"
          echo "PIP_INDEX_URL=$PIP_INDEX_URL" >> $GITHUB_ENV
      
      - name: Generate models from schemas
        run: |
          cd schemas
          pip install pipenv
          pipenv install
          pipenv run python generate.py
      
      - name: Install dependencies
        run: |
          cd backend/packages/orb-models
          pip install pipenv
          pipenv install --dev
          # Install orb-common from CodeArtifact (not local path)
          pipenv run pip install orb-common --index-url=$PIP_INDEX_URL
          pipenv install -e .
      
      - name: Lint with black and isort
        run: |
          cd backend/packages/orb-models
          pipenv run black --check . || echo "Black formatting check failed - generated code has issues"
          pipenv run isort --check-only . --diff || echo "isort check failed - generated code has issues"
      
      - name: Type check with mypy
        run: |
          cd backend/packages/orb-models
          pipenv run mypy orb_models --ignore-missing-imports || true
      
      - name: Run tests
        run: |
          cd backend/packages/orb-models
          pipenv run pytest tests/ -v --cov=orb_models --cov-report=xml --cov-report=html || true

  build-models:
    name: Build ORB Models
    needs: [detect-changes, test-models]
    if: |
      (needs.detect-changes.outputs.models-changed == 'true' ||
       needs.detect-changes.outputs.schemas-changed == 'true') &&
      (needs.test-models.result == 'success' || needs.test-models.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Configure CodeArtifact
        run: |
          # Get CodeArtifact configuration
          DOMAIN=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/domain" --query 'Parameter.Value' --output text 2>/dev/null || echo "orb-integration-hub")
          REPOSITORY=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/repository" --query 'Parameter.Value' --output text 2>/dev/null || echo "${{ inputs.environment }}-python-packages")
          
          # Get authorization token
          AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $DOMAIN --query authorizationToken --output text)
          
          # Get repository endpoint
          REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint --domain $DOMAIN --repository $REPOSITORY --format pypi --query repositoryEndpoint --output text)
          
          # Configure pip to use CodeArtifact
          export PIP_INDEX_URL="https://aws:${AUTH_TOKEN}@${REPOSITORY_ENDPOINT#https://}simple/"
          echo "PIP_INDEX_URL=$PIP_INDEX_URL" >> $GITHUB_ENV
      
      - name: Generate models from schemas
        run: |
          cd schemas
          pip install pipenv
          pipenv install
          pipenv run python generate.py
      
      - name: Build package
        run: |
          cd backend/packages/orb-models
          # Clean any existing build artifacts
          rm -rf dist/ build/ *.egg-info/
          pip install pipenv
          pipenv install --dev
          # Install orb-common from CodeArtifact
          pipenv run pip install orb-common --index-url=$PIP_INDEX_URL
          pipenv install build twine
          # Ensure we have latest setuptools
          pipenv run pip install --upgrade setuptools wheel
          pipenv run python -m build
      
      - name: Check package
        run: |
          cd backend/packages/orb-models
          pipenv run twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orb-models-dist
          path: backend/packages/orb-models/dist/

  publish-models:
    name: Publish ORB Models to CodeArtifact
    needs: [build-models]
    if: needs.build-models.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Get CodeArtifact configuration
        id: codeartifact
        run: |
          # Get domain and repository from SSM parameters
          DOMAIN=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/domain" --query 'Parameter.Value' --output text 2>/dev/null || echo "orb-integration-hub")
          REPOSITORY=$(aws ssm get-parameter --name "/orb/integration-hub/${{ inputs.environment }}/codeartifact/repository" --query 'Parameter.Value' --output text 2>/dev/null || echo "${{ inputs.environment }}-python-packages")
          
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          
          # Get repository endpoint
          REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint \
            --domain $DOMAIN \
            --repository $REPOSITORY \
            --format pypi \
            --query repositoryEndpoint \
            --output text)
          
          # Get authorization token
          AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain $DOMAIN \
            --query authorizationToken \
            --output text)
          
          echo "::add-mask::$AUTH_TOKEN"
          echo "repository_endpoint=$REPOSITORY_ENDPOINT" >> $GITHUB_OUTPUT
          echo "auth_token=$AUTH_TOKEN" >> $GITHUB_OUTPUT
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: orb-models-dist
          path: ./dist
      
      - name: Install twine
        run: pip install twine
      
      - name: Debug wheel metadata
        run: |
          echo "=== Listing dist contents ==="
          ls -la dist/
          echo "=== Checking wheel contents ==="
          unzip -l dist/*.whl | head -20
          echo "=== Extracting METADATA file ==="
          unzip -p dist/*.whl '*/METADATA' | head -50
          echo "=== Checking for license-file in METADATA ==="
          unzip -p dist/*.whl '*/METADATA' | grep -i "license" || true
      
      - name: Publish to CodeArtifact
        env:
          TWINE_USERNAME: aws
          TWINE_PASSWORD: ${{ steps.codeartifact.outputs.auth_token }}
          TWINE_REPOSITORY_URL: ${{ steps.codeartifact.outputs.repository_endpoint }}
        run: |
          echo "Publishing to CodeArtifact repository: ${{ steps.codeartifact.outputs.repository }}"
          twine upload dist/* --verbose

  summary:
    name: Deployment Summary
    needs: [detect-changes, build-common, build-models, publish-common, publish-models]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Summary
        run: |
          echo "## Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo ""  >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo ""  >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Common: ${{ needs.detect-changes.outputs.common-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Models: ${{ needs.detect-changes.outputs.models-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Schemas: ${{ needs.detect-changes.outputs.schemas-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Common Build: ${{ needs.build-common.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Models Build: ${{ needs.build-models.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Publish Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Common Publish: ${{ needs.publish-common.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ORB Models Publish: ${{ needs.publish-models.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add next steps based on results
          if [[ "${{ needs.publish-common.result }}" == "success" || "${{ needs.publish-models.result }}" == "success" ]]; then
            echo "### ✅ Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Deploy Lambda layers using the **deploy-lambda-layers** workflow" >> $GITHUB_STEP_SUMMARY
            echo "2. Deploy backend services using the **deploy-backend** workflow" >> $GITHUB_STEP_SUMMARY
          fi