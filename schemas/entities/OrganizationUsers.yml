# file: schemas/entities/OrganizationUsers.yml
# author: AI Assistant
# date: 2025-06-22
# description: Organization users membership table with role-based access control
# Maps users to organizations with specific roles (OWNER, ADMINISTRATOR, VIEWER)

type: lambda-dynamodb
version: '1.0'
name: OrganizationUsers
model:
  authConfig:
    cognitoAuthentication:
      groups:
        OWNER:
          - '*'
        EMPLOYEE:
          - '*'
        CUSTOMER:
          - '*'
  keys:
    primary:
      partition: organizationId
      sort: userId
      description: Composite primary key for organization membership (organization + user)
    secondary:
      - name: UserOrganizationsIndex
        type: GSI
        partition: userId
        sort: organizationId
        projection_type: ALL
        description: Index for querying all organizations a user belongs to
      - name: OrganizationRoleIndex
        type: GSI
        partition: organizationId
        sort: role
        projection_type: ALL
        description: Index for querying members of an organization by role
  attributes:
    userId:
      type: string
      required: true
      description: ID of the user (foreign key to Users, partition key)
    organizationId:
      type: string
      required: true
      description: ID of the organization (foreign key to Organizations, sort key)
    role:
      type: string
      required: true
      enum_type: OrganizationUserRole
      enum_values:
        - ADMINISTRATOR
        - VIEWER
      description: Role of the user within the organization (OWNER is determined by Organizations.ownerId field)
    status:
      type: string
      required: true
      enum_type: OrganizationUserStatus
      enum_values:
        - ACTIVE
        - INACTIVE
        - INVITED
        - PENDING
        - REJECTED
        - REMOVED
      description: Current status of the user's membership in the organization
    invitedBy:
      type: string
      required: false
      description: ID of the user who sent the invitation (for audit trail)
    createdAt:
      type: timestamp
      required: true
      description: When the membership was created
    updatedAt:
      type: timestamp
      required: true
      description: When the membership was last updated

# Custom queries for organization member lookups
customQueries:
  - name: GetOrganizationMembers
    type: query
    description: Get all members of a specific organization
    input:
      organizationId:
        type: String!
        description: Organization ID to get members for
    returns: '[OrganizationUsers]'
    # No index needed - uses primary key
    
  - name: GetUserOrganizations
    type: query
    description: Get all organizations a user belongs to
    input:
      userId:
        type: String!
        description: User ID to get organizations for
    returns: '[OrganizationUsers]'
    index: UserOrganizationsIndex
    
  - name: GetOrganizationMembersByRole
    type: query
    description: Get members of an organization filtered by role
    input:
      organizationId:
        type: String!
        description: Organization ID to get members for
      role:
        type: String!
        description: Role to filter by
    returns: '[OrganizationUsers]'
    index: OrganizationRoleIndex