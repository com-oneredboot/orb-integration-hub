/**
 * {{ schema.name }} Lambda-backed GraphQL resolver model.
 * Generated at {{ timestamp }}
 */

// Import enums and models used in this model
{% for attr in schema.attributes %}
{% if attr.enum_type %}
import { {{ attr.enum_type }} } from './{{ attr.enum_type }}Enum';
{% endif %}
{% endfor %}
{% for model in model_imports %}
import { {{ model }}Model, I{{ model }}Model } from './{{ model }}Model';
{% endfor %}

// Interface definition
export interface I{{ schema.name }} {
{% for attr in schema.attributes %}
  {{ attr.name }}: {{ attr.type|to_typescript_type }}{% if not attr.required %} | undefined{% endif %};
{% endfor %}
}

// Class definition
export class {{ schema.name }} implements I{{ schema.name }} {
{% for attr in schema.attributes %}
  {{ attr.name }} = {% if attr.type|to_typescript_type == 'string' %}''{% elif attr.type|to_typescript_type == 'number' %}0{% elif attr.type|to_typescript_type == 'boolean' %}false{% elif attr.type|to_typescript_type == 'string[]' %}[]{% elif attr.type|to_typescript_type == 'any[]' %}[]{% elif attr.type|to_typescript_type == 'Record<string, any>' %}{}{% elif attr.type|to_typescript_type == 'Set<string>' %}new Set(){% elif attr.type|to_typescript_type == 'Buffer' %}Buffer.from(''){% elif not attr.required %}undefined{% else %}undefined{% endif %};
{% endfor %}

  constructor(data: Partial<I{{ schema.name }}> = {}) {
    Object.entries(data).forEach(([key, value]) => {
      if (key in this) {
{% for attr in schema.attributes %}
{% if attr.enum_type %}
        if (key === '{{ attr.name }}' && typeof value === 'string') {
          this.{{ attr.name }} = {{ attr.enum_type }}Enum[value as keyof typeof {{ attr.enum_type }}Enum] ?? {{ attr.enum_type }}Enum.UNKNOWN;
        } else 
{% endif %}
{% endfor %}
        {
          this[key as keyof this] = value as this[keyof this];
        }
      }
    });
  }
}

// Response type
export type {{ schema.name }}Response = {
  statusCode: number;
  message: string;
  data: I{{ schema.name }} | null;
}; 