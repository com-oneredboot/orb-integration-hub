/**
 * {{ schema.table }} DynamoDB model.
 */

// Import enums and models used in this model
{% for attr in schema.attributes %}
{% if attr.enum_type %}
import { {{ attr.enum_type }} } from './{{ attr.enum_type }}.enum';
{% endif %}
{% endfor %}
{% for model in model_imports %}
import { {{ model }} } from './{{ model }}.model';
{% endfor %}

// CreateInput
export type {{ schema.table }}CreateInput = {
{% for attr in schema.attributes %}
  {{ attr.name }}: {{ attr.type|to_typescript_type }}{% if not attr.required %} | undefined{% endif %};
{% endfor %}
};

// UpdateInput
export type {{ schema.table }}UpdateInput = {
{% for attr in schema.attributes %}
  {{ attr.name }}: {{ attr.type|to_typescript_type }}{% if not attr.required %} | undefined{% endif %};
{% endfor %}
};

// QueryInput
{% if schema.partition_key %}
export type {{ schema.table }}QueryBy{{ schema.partition_key|to_pascal_case }}Input = {
  {{ schema.partition_key }}: string;
};
{% endif %}

{% if schema.sort_key and schema.sort_key != 'None' %}
export type {{ schema.table }}QueryBy{{ schema.sort_key|to_pascal_case }}Input = {
  {{ schema.sort_key }}: string;
};

export type {{ schema.table }}QueryByBothInput = {
  {{ schema.partition_key }}: string;
  {{ schema.sort_key }}: string;
};
{% endif %}

{% if schema.secondary_indexes %}
{% for index in schema.secondary_indexes %}
export type {{ schema.table }}QueryBy{{ index.partition|to_pascal_case }}Input = {
  {{ index.partition }}: string;
};
{% endfor %}
{% endif %}

// Response types
export type {{ schema.table }}Response = {
  statusCode: number;
  message: string;
  data: I{{ schema.table }} | null;
};

export type {{ schema.table }}CreateResponse = {
  statusCode: number;
  message: string;
  data: I{{ schema.table }} | null;
};

export type {{ schema.table }}UpdateResponse = {
  statusCode: number;
  message: string;
  data: I{{ schema.table }} | null;
};

export interface I{{ schema.table }} {
{% for attr in schema.attributes %}
  {{ attr.name }}: {{ attr.type|to_typescript_type }}{% if not attr.required %} | undefined{% endif %};
{% endfor %}
}

export class {{ schema.table }} implements I{{ schema.table }} {
{% for attr in schema.attributes %}
  {{ attr.name }} = {% if attr.type|to_typescript_type == 'string' %}''{% elif attr.type|to_typescript_type == 'number' %}0{% elif attr.type|to_typescript_type == 'boolean' %}false{% elif attr.type|to_typescript_type == 'string[]' %}[]{% elif attr.type|to_typescript_type == 'any[]' %}[]{% elif attr.type|to_typescript_type == 'Record<string, any>' %}{}{% elif attr.type|to_typescript_type == 'Set<string>' %}new Set(){% elif attr.type|to_typescript_type == 'Buffer' %}Buffer.from(''){% elif not attr.required %}undefined{% else %}''{% endif %};
{% endfor %}

  constructor(data: Partial<I{{ schema.table }}> = {}) {
    Object.entries(data).forEach(([key, value]) => {
      if (key in this) {
{% for attr in schema.attributes %}
{% if attr.enum_type %}
        if (key === '{{ attr.name }}' && typeof value === 'string') {
          this.{{ attr.name }} = {{ attr.enum_type }}[value as keyof typeof {{ attr.enum_type }}] ?? {{ attr.enum_type }}.UNKNOWN;
        } else 
{% endif %}
{% if attr.name.endswith('_at') or attr.name.endswith('_date') or attr.name == 'timestamp' %}
        if (key === '{{ attr.name }}' && value !== undefined) {
          // Ensure ISO 8601 format for timestamps
          this.{{ attr.name }} = typeof value === 'string' ? value : new Date(value).toISOString();
        } else
{% endif %}
{% endfor %}
        {
          this[key as keyof this] = value as this[keyof this];
        }
      }
    });
  }
} 