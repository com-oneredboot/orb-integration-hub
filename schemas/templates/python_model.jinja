"""{{ table | to_pascal_case }} model."""
from typing import Optional, List
from pydantic import BaseModel, Field
from datetime import datetime
from enum import Enum

{% for attr in attributes %}
{% if attr.enum_type %}
class {{ attr.enum_type }}(str, Enum):
    """{{ attr.enum_type }} enum."""
    {% for value in attr.enum_values %}
    {{ value }} = "{{ value }}"
    {% endfor %}

{% endif %}
{% endfor %}

class {{ table | to_pascal_case }}(BaseModel):
    """{{ table | to_pascal_case }} model."""
    {% for attr in attributes %}
    {{ attr.name }}: {% if attr.required %}{{ attr.type }}{% else %}Optional[{{ attr.type }}]{% endif %} = Field({% if attr.required %}...{% else %}None{% endif %}, description="{{ attr.description }}")
    {% endfor %}

    class Config:
        """Model configuration."""
        from_attributes = True