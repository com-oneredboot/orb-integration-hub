"""
Base GraphQL schema.
Generated at [[ timestamp ]].

This schema follows these conventions:
- Type names: PascalCase (e.g., ApplicationRole)
- Field names: camelCase (e.g., applicationId)
- Input types: PascalCase with Input suffix (e.g., ApplicationRoleInput)
- Response types: PascalCase with Response suffix (e.g., ApplicationRoleResponse)
- List response types: PascalCase with ListResponse suffix (e.g., ApplicationRoleListResponse)
- Query operations: PascalCase with Query suffix (e.g., ApplicationRoleQuery)
- Mutation operations: PascalCase with action suffix (e.g., ApplicationRoleCreate)
- Response fields: PascalCase (e.g., StatusCode, Message, Data)

All operations are secured with AWS Cognito user pool authentication for the admin group.
"""

# Enums
enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserGroups {
  ADMIN
  USER
}

enum ApplicationEnvironments {
  DEV
  STAGING
  PROD
}

# Base types
type Query {
  Ping: String
  {% for table_name, schema in schemas.items() %}
  [[ schema.table ]]QueryBy[[ schema.partition_key | to_pascal_case ]](input: [[ schema.table ]]QueryBy[[ schema.partition_key | to_pascal_case ]]Input!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  {% if schema.sort_key and schema.sort_key != 'None' %}
  [[ schema.table ]]QueryBy[[ schema.sort_key | to_pascal_case ]](input: [[ schema.table ]]QueryBy[[ schema.sort_key | to_pascal_case ]]Input!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  [[ schema.table ]]QueryByBoth(input: [[ schema.table ]]QueryByBothInput!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  {% endif %}
  {% endfor %}
}

type Mutation {
  Ping: String
  {% for table_name, schema in schemas.items() %}
  [[ schema.table ]]Create(input: [[ schema.table ]]CreateInput!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  [[ schema.table ]]Update(input: [[ schema.table ]]UpdateInput!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  [[ schema.table ]]Delete(id: ID!): [[ schema.table ]]Response
    @aws_auth(cognito_groups: ["admin"])
  {% endfor %}
}

# Model types
{% for table_name, schema in schemas.items() %}
type [[ schema.table ]] {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.enum_type %}[[ attr.enum_type ]]{% else %}{% if attr.type == 'N' %}Int{% elif attr.type == 'B' %}Boolean{% elif attr.type == 'S' %}String{% elif attr.type == 'L' %}AWSJSON{% elif attr.type == 'M' %}AWSJSON{% elif attr.type == 'NS' %}AWSJSON{% elif attr.type == 'SS' %}AWSJSON{% elif attr.type == 'BS' %}AWSJSON{% else %}String{% endif %}{% endif %}!
  {% endfor %}
}

input [[ schema.table ]]CreateInput {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.enum_type %}[[ attr.enum_type ]]{% else %}{% if attr.type == 'N' %}Int{% elif attr.type == 'B' %}Boolean{% elif attr.type == 'S' %}String{% elif attr.type == 'L' %}AWSJSON{% elif attr.type == 'M' %}AWSJSON{% elif attr.type == 'NS' %}AWSJSON{% elif attr.type == 'SS' %}AWSJSON{% elif attr.type == 'BS' %}AWSJSON{% else %}String{% endif %}{% endif %}!
  {% endfor %}
}

input [[ schema.table ]]UpdateInput {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.enum_type %}[[ attr.enum_type ]]{% else %}{% if attr.type == 'N' %}Int{% elif attr.type == 'B' %}Boolean{% elif attr.type == 'S' %}String{% elif attr.type == 'L' %}AWSJSON{% elif attr.type == 'M' %}AWSJSON{% elif attr.type == 'NS' %}AWSJSON{% elif attr.type == 'SS' %}AWSJSON{% elif attr.type == 'BS' %}AWSJSON{% else %}String{% endif %}{% endif %}
  {% endfor %}
}

input [[ schema.table ]]QueryBy[[ schema.partition_key | to_pascal_case ]]Input {
  [[ schema.partition_key | to_camel_case ]]: {% if schema.attributes | selectattr('name', 'equalto', schema.partition_key) | map(attribute='type') | first == 'N' %}Int{% else %}String{% endif %}!
}

{% if schema.sort_key and schema.sort_key != 'None' %}
input [[ schema.table ]]QueryBy[[ schema.sort_key | to_pascal_case ]]Input {
  [[ schema.sort_key | to_camel_case ]]: {% if schema.attributes | selectattr('name', 'equalto', schema.sort_key) | map(attribute='type') | first == 'N' %}Int{% else %}String{% endif %}!
}

input [[ schema.table ]]QueryByBothInput {
  [[ schema.partition_key | to_camel_case ]]: {% if schema.attributes | selectattr('name', 'equalto', schema.partition_key) | map(attribute='type') | first == 'N' %}Int{% else %}String{% endif %}!
  [[ schema.sort_key | to_camel_case ]]: {% if schema.attributes | selectattr('name', 'equalto', schema.sort_key) | map(attribute='type') | first == 'N' %}Int{% else %}String{% endif %}!
}
{% endif %}

type [[ schema.table ]]Response {
  StatusCode: Int!
  Message: String!
  Data: [[ schema.table ]]
}

type [[ schema.table ]]ListResponse {
  StatusCode: Int!
  Message: String!
  Data: [[[ schema.table ]]]
}

{% endfor %}