"""
Base GraphQL schema.
Generated at [[ timestamp ]].

This schema follows these conventions:
- Type names: PascalCase (e.g., ApplicationRole)
- Field names: camelCase (e.g., applicationId)
- Input types: PascalCase with Input suffix (e.g., ApplicationRoleInput)
- Response types: PascalCase with Response suffix (e.g., ApplicationRoleResponse)
- List response types: PascalCase with ListResponse suffix (e.g., ApplicationRoleListResponse)
- Query operations: PascalCase with Query suffix (e.g., ApplicationRoleQuery)
- Mutation operations: PascalCase with action suffix (e.g., ApplicationRoleCreate)
- Response fields: PascalCase (e.g., StatusCode, Message, Data)

All operations are secured with AWS Cognito user pool authentication for the admin group.
"""

# Enums
enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserGroups {
  ADMIN
  USER
}

enum ApplicationEnvironments {
  DEV
  STAGING
  PROD
}

# Base types
type Query {
  Ping: String
  {% for table_name, schema in schemas.items() %}
  [[ table_name | to_pascal_case ]]Query(input: [[ table_name | to_pascal_case ]]QueryInput!): [[ table_name | to_pascal_case ]]Response
    @aws_auth(cognito_groups: ["admin"])
  {% endfor %}
}

type Mutation {
  Ping: String
  {% for table_name, schema in schemas.items() %}
  [[ table_name | to_pascal_case ]]Create(input: [[ table_name | to_pascal_case ]]CreateInput!): [[ table_name | to_pascal_case ]]Response
    @aws_auth(cognito_groups: ["admin"])
  [[ table_name | to_pascal_case ]]Update(input: [[ table_name | to_pascal_case ]]UpdateInput!): [[ table_name | to_pascal_case ]]Response
    @aws_auth(cognito_groups: ["admin"])
  [[ table_name | to_pascal_case ]]Delete(id: ID!): [[ table_name | to_pascal_case ]]Response
    @aws_auth(cognito_groups: ["admin"])
  {% endfor %}
}

# Model types
{% for table_name, schema in schemas.items() %}
type [[ table_name | to_pascal_case ]] {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.type == 'N' %}Int{% else %}String{% endif %}!
  {% endfor %}
}

input [[ table_name | to_pascal_case ]]CreateInput {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.type == 'N' %}Int{% else %}String{% endif %}!
  {% endfor %}
}

input [[ table_name | to_pascal_case ]]UpdateInput {
  {% for attr in schema.attributes %}
  [[ attr.name | to_camel_case ]]: {% if attr.type == 'N' %}Int{% else %}String{% endif %}
  {% endfor %}
}

input [[ table_name | to_pascal_case ]]QueryInput {
  [[ schema.partition_key | to_camel_case ]]: String!
  {% if schema.sort_key %}
  [[ schema.sort_key | to_camel_case ]]: String
  {% endif %}
}

type [[ table_name | to_pascal_case ]]Response {
  StatusCode: Int!
  Message: String!
  Data: [[ table_name | to_pascal_case ]]
}

type [[ table_name | to_pascal_case ]]ListResponse {
  StatusCode: Int!
  Message: String!
  Data: [[[ table_name | to_pascal_case ]]]
}

{% endfor %}