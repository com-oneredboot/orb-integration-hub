# --------------------------------------------------- #
AWSTemplateFormatVersion: 2010-09-09

# --------------------------------------------------- #
Transform: AWS::Serverless-2016-10-31

# --------------------------------------------------- #
Description: >
 Application Infrastructure - DynamoDB Tables

# --------------------------------------------------- #
Parameters:
  Environment:
    Default: dev
    Type: String
    Description: Environment name (dev, staging, prod)
  CustomerId:
    Default: orb
    Type: String
    Description: Customer identifier
  ProjectId:
    Default: integration-hub
    Type: String
    Description: Project identifier
  TracingIs:
    Default: Active
    Type: String
    Description: Whether tracing is enabled

# --------------------------------------------------- #
Resources:
  {% for table_name, schema in schemas.items() %}
  {{ schema.table }}Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${CustomerId}-${ProjectId}-${Environment}-{{ schema.table }}
      AttributeDefinitions:
        - AttributeName: {{ schema.partition_key }}
          AttributeType: {{ schema.attributes | selectattr("name", "equalto", schema.partition_key) | map(attribute="type") | first | to_dynamodb_type }}
        {% if schema.sort_key and schema.sort_key != 'None' %}
        - AttributeName: {{ schema.sort_key }}
          AttributeType: {{ schema.attributes | selectattr("name", "equalto", schema.sort_key) | map(attribute="type") | first | to_dynamodb_type }}
        {% endif %}
        {% if schema.secondary_indexes %}
        {% for index in schema.secondary_indexes %}
        {% if index.partition not in [schema.partition_key, schema.sort_key] %}
        - AttributeName: {{ index.partition }}
          AttributeType: {{ schema.attributes | selectattr("name", "equalto", index.partition) | map(attribute="type") | first | to_dynamodb_type }}
        {% endif %}
        {% if index.sort and index.sort not in [schema.partition_key, schema.sort_key, index.partition] %}
        - AttributeName: {{ index.sort }}
          AttributeType: {{ schema.attributes | selectattr("name", "equalto", index.sort) | map(attribute="type") | first | to_dynamodb_type }}
        {% endif %}
        {% endfor %}
        {% endif %}
      KeySchema:
        - AttributeName: {{ schema.partition_key }}
          KeyType: HASH
        {% if schema.sort_key and schema.sort_key != 'None' %}
        - AttributeName: {{ schema.sort_key }}
          KeyType: RANGE
        {% endif %}
      {% if schema.secondary_indexes %}
      GlobalSecondaryIndexes:
        {% for index in schema.secondary_indexes %}
        - IndexName: {{ index.name }}
          KeySchema:
            - AttributeName: {{ index.partition }}
              KeyType: HASH
            {% if index.sort %}
            - AttributeName: {{ index.sort }}
              KeyType: RANGE
            {% endif %}
          Projection:
            ProjectionType: {{ index.projection_type }}
            {% if index.projection_type == 'INCLUDE' %}
            NonKeyAttributes:
              {% for attr in index.projected_attributes %}
              - {{ attr }}
              {% endfor %}
            {% endif %}
        {% endfor %}
      {% endif %}
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Billable
          Value: "true"
        - Key: CustomerId
          Value: !Ref CustomerId
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectId
          Value: !Ref ProjectId

  {{ schema.table }}TableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-{{ table_name | to_kebab_case }}-table-name
      Type: String
      Value: !Ref {{ schema.table }}Table

  {{ schema.table }}TableArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${CustomerId}-${ProjectId}-${Environment}-{{ table_name | to_kebab_case }}-table-arn
      Type: String
      Value: !GetAtt {{ schema.table }}Table.Arn
  {% endfor %}

# --------------------------------------------------- #
Outputs:
  {% for table_name, schema in schemas.items() %}
  {{ schema.table }}TableName:
    Description: {{ schema.table }} Table Name
    Value: !Ref {{ schema.table }}Table

  {{ schema.table }}TableArn:
    Description: {{ schema.table }} Table ARN
    Value: !GetAtt {{ schema.table }}Table.Arn
  {% endfor %}