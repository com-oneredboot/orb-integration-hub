/**
 * Organization Service
 * 
 * Provides CRUD operations for organization management.
 * Handles API communication for organization-related functionality.
 */

import { Injectable } from '@angular/core';
import { GraphQLResult } from '@aws-amplify/api-graphql';
import { Observable, from } from 'rxjs';
import { map, catchError, switchMap, take } from 'rxjs/operators';
import { Store } from '@ngrx/store';

import { ApiService } from './api.service';
import { 
  OrganizationsCreateMutation,
  OrganizationsUpdateMutation,
  OrganizationsDeleteMutation,
  OrganizationsQueryByOrganizationId,
  OrganizationsQueryByOwnerId,
  OrganizationsWithDetailsQueryByOwnerId
} from '../graphql/Organizations.graphql';
import {
  Organizations,
  OrganizationsCreateInput,
  OrganizationsUpdateInput,
  OrganizationsResponse,
  OrganizationsCreateResponse,
  OrganizationsUpdateResponse,
  OrganizationsListResponse,
  IOrganizations,
  OrganizationsCreateMutationResponse,
  OrganizationsUpdateMutationResponse,
  OrganizationsDeleteMutationResponse,
  OrganizationsQueryByOrganizationIdResponse,
  OrganizationsQueryByOwnerIdResponse
} from '../models/OrganizationsModel';
import { OrganizationStatus } from '../models/OrganizationStatusEnum';
import * as fromUser from '../../features/user/store/user.selectors';

interface AuthCheckResult {
  isAuthenticated: boolean;
  error?: string;
}

@Injectable({
  providedIn: 'root'
})
export class OrganizationService extends ApiService {

  constructor(private store: Store) {
    super();
  }

  /**
   * Check if user is properly authenticated for userPool operations
   */
  private async checkAuthentication(): Promise<AuthCheckResult> {
    try {
      const { fetchAuthSession } = await import('@aws-amplify/auth');
      const session = await fetchAuthSession();
      
      const hasAccessToken = !!session.tokens?.accessToken;
      const hasIdToken = !!session.tokens?.idToken;
      
      if (!hasAccessToken || !hasIdToken) {
        return {
          isAuthenticated: false,
          error: 'Missing authentication tokens'
        };
      }

      // Check if tokens are expired
      const now = Math.floor(Date.now() / 1000);
      const accessTokenExp = session.tokens?.accessToken?.payload?.exp as number;
      const idTokenExp = session.tokens?.idToken?.payload?.exp as number;
      
      if (!accessTokenExp || !idTokenExp || accessTokenExp <= now || idTokenExp <= now) {
        return {
          isAuthenticated: false,
          error: 'Authentication tokens have expired or are invalid'
        };
      }

      console.debug('[OrganizationService] Authentication check passed', {
        hasAccessToken,
        hasIdToken,
        accessTokenExp: new Date(accessTokenExp * 1000),
        idTokenExp: new Date(idTokenExp * 1000)
      });

      return { isAuthenticated: true };
    } catch (error) {
      console.error('[OrganizationService] Authentication check failed:', error);
      return {
        isAuthenticated: false,
        error: `Authentication check failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Create a new organization
   * @param input Organization creation data
   * @returns Observable<OrganizationsCreateResponse>
   */
  public createOrganization(input: Partial<OrganizationsCreateInput>): Observable<OrganizationsCreateResponse> {
    console.debug('[OrganizationService] Creating organization:', input);

    return from(this.checkAuthentication()).pipe(
      switchMap((authResult: AuthCheckResult) => {
        if (!authResult.isAuthenticated) {
          throw new Error(`Authentication required: ${authResult.error}`);
        }

        console.debug('[OrganizationService] User is authenticated, proceeding with organization creation');

        const timestamp = Math.floor(Date.now() / 1000); // Epoch seconds

        // Build the create input with required fields
        const createInput: OrganizationsCreateInput = {
          organizationId: input.organizationId || '', // Will be generated by backend
          name: input.name || '',
          description: input.description || '',
          ownerId: input.ownerId || '', // Will be set by backend from authenticated user
          status: input.status || OrganizationStatus.PENDING,
          createdAt: timestamp,
          updatedAt: timestamp,
          kmsKeyId: input.kmsKeyId || '',
          kmsKeyArn: input.kmsKeyArn || '',
          kmsAlias: input.kmsAlias || ''
        };

        return from(
          this.mutate(
            OrganizationsCreateMutation,
            { 
              input: createInput
            },
            'userPool' // Use userPool auth for authenticated operations
          ) as Promise<GraphQLResult<OrganizationsCreateMutationResponse>>
        );
      })
    ).pipe(
      map((response: GraphQLResult<any>) => {
        console.debug('[OrganizationService] Create organization response:', response);
        
        if (!response.data) {
          throw new Error('No data in create organization response');
        }

        const organizationsData = response.data.OrganizationsCreate;
        return {
          StatusCode: organizationsData?.StatusCode ?? 200,
          Message: organizationsData?.Message ?? 'Organization created successfully',
          Data: organizationsData?.Data ? new Organizations(organizationsData.Data) : null
        } as OrganizationsCreateResponse;
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error creating organization:', error);
        
        // Handle authentication errors
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to create organizations. Please ensure you are signed in and have the necessary permissions.');
        }
        
        // Handle validation errors
        if (error?.message?.includes('validation')) {
          throw new Error('Invalid organization data. Please check your input and try again.');
        }
        
        // Generic error
        throw new Error('Failed to create organization. Please try again later.');
      })
    );
  }

  /**
   * Update an existing organization
   * @param input Organization update data
   * @returns Observable<OrganizationsUpdateResponse>
   */
  public updateOrganization(input: Partial<OrganizationsUpdateInput>): Observable<OrganizationsUpdateResponse> {
    console.debug('[OrganizationService] Updating organization:', input);

    if (!input.organizationId) {
      throw new Error('Organization ID is required for updates');
    }

    const updateInput: OrganizationsUpdateInput = {
      organizationId: input.organizationId,
      name: input.name || '',
      description: input.description || '',
      ownerId: input.ownerId || '',
      status: input.status || OrganizationStatus.ACTIVE,
      createdAt: input.createdAt || 0,
      updatedAt: Math.floor(Date.now() / 1000), // Always update timestamp in epoch seconds
      kmsKeyId: input.kmsKeyId || '',
      kmsKeyArn: input.kmsKeyArn || '',
      kmsAlias: input.kmsAlias || ''
    };

    return from(
      this.mutate(
        OrganizationsUpdateMutation,
        { 
          input: updateInput
        },
        'userPool' // Use userPool auth for authenticated operations
      ) as Promise<GraphQLResult<OrganizationsUpdateMutationResponse>>
    ).pipe(
      map(response => {
        console.debug('[OrganizationService] Update organization response:', response);
        
        if (!response.data) {
          throw new Error('No data in update organization response');
        }

        const updateData = response.data.OrganizationsUpdate;
        return {
          StatusCode: updateData?.StatusCode ?? 200,
          Message: updateData?.Message ?? 'Organization updated successfully',
          Data: updateData?.Data ? new Organizations(updateData.Data) : null
        } as OrganizationsUpdateResponse;
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error updating organization:', error);
        
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to update this organization.');
        }
        
        if (error?.message?.includes('not found')) {
          throw new Error('Organization not found. It may have been deleted.');
        }
        
        throw new Error('Failed to update organization. Please try again later.');
      })
    );
  }

  /**
   * Delete an organization
   * @param organizationId ID of organization to delete
   * @returns Observable<OrganizationsResponse>
   */
  public deleteOrganization(organizationId: string): Observable<OrganizationsResponse> {
    console.debug('[OrganizationService] Deleting organization:', organizationId);

    if (!organizationId) {
      throw new Error('Organization ID is required for deletion');
    }

    return from(
      this.mutate(
        OrganizationsDeleteMutation,
        { 
          id: organizationId
        },
        'userPool' // Use userPool auth for authenticated operations
      ) as Promise<GraphQLResult<OrganizationsDeleteMutationResponse>>
    ).pipe(
      map(response => {
        console.debug('[OrganizationService] Delete organization response:', response);
        
        if (!response.data) {
          throw new Error('No data in delete organization response');
        }

        const deleteData = response.data.OrganizationsDelete;
        return {
          StatusCode: deleteData?.StatusCode ?? 200,
          Message: deleteData?.Message ?? 'Organization deleted successfully',
          Data: deleteData?.Data ? new Organizations(deleteData.Data) : null
        } as OrganizationsResponse;
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error deleting organization:', error);
        
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to delete this organization.');
        }
        
        if (error?.message?.includes('not found')) {
          throw new Error('Organization not found. It may have already been deleted.');
        }
        
        throw new Error('Failed to delete organization. Please try again later.');
      })
    );
  }

  /**
   * Get organizations for the current user
   * @returns Observable<OrganizationsListResponse>
   */
  public getUserOrganizations(): Observable<OrganizationsListResponse> {
    console.debug('[OrganizationService] Getting user organizations');

    // First get the current user from the store
    return this.store.select(fromUser.selectCurrentUser).pipe(
      take(1), // Take only the current value
      switchMap(currentUser => {
        if (!currentUser || !currentUser.userId) {
          throw new Error('No user found in store. Please ensure you are logged in.');
        }

        const userId = currentUser.userId;
        console.debug('[OrganizationService] Querying organizations for user:', userId);

        return from(
          this.query(
            OrganizationsQueryByOwnerId,
            { 
              input: {
                ownerId: userId
              }
            },
            'userPool' // Use userPool auth for authenticated operations
          ) as Promise<GraphQLResult<OrganizationsQueryByOwnerIdResponse>>
        );
      }),
      map(response => {
        console.debug('[OrganizationService] Get user organizations response:', response);
        
        if (!response.data) {
          throw new Error('No data in get organizations response');
        }

        const queryData = response.data.OrganizationsQueryByOwnerId;
        // Convert raw data to Organizations instances
        const organizations = (queryData?.Data || []).map((org: any) => new Organizations(org));

        return {
          StatusCode: queryData?.StatusCode ?? 200,
          Message: queryData?.Message ?? 'Organizations retrieved successfully',
          Data: organizations
        } as OrganizationsListResponse;
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error getting organizations:', error);
        
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to view organizations.');
        }
        
        throw new Error('Failed to retrieve organizations. Please try again later.');
      })
    );
  }

  /**
   * Get organizations with details for the current user
   * @returns Observable<any> - Returns organizations with userRole, memberCount, and applicationCount
   */
  public getUserOrganizationsWithDetails(): Observable<any> {
    console.debug('[OrganizationService] Getting user organizations with details');

    // First get the current user from the store
    return this.store.select(fromUser.selectCurrentUser).pipe(
      take(1), // Take only the current value
      switchMap(currentUser => {
        if (!currentUser || !currentUser.userId) {
          throw new Error('No user found in store. Please ensure you are logged in.');
        }

        const userId = currentUser.userId;
        console.debug('[OrganizationService] Querying organizations with details for user:', userId);

        return from(
          this.query(
            OrganizationsWithDetailsQueryByOwnerId,
            { 
              input: {
                ownerId: userId
              }
            },
            'userPool' // Use userPool auth for authenticated operations
          ) as Promise<GraphQLResult<any>>
        );
      }),
      map(response => {
        console.debug('[OrganizationService] Get user organizations with details response:', response);
        
        if (!response.data) {
          throw new Error('No data in get organizations response');
        }

        const queryData = response.data.OrganizationsWithDetailsQueryByOwnerId;
        // The response is an array of OrganizationWithDetails objects
        return queryData || [];
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error getting organizations with details:', error);
        
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to view organizations.');
        }
        
        throw new Error('Failed to retrieve organizations. Please try again later.');
      })
    );
  }

  /**
   * Get a specific organization by ID
   * @param organizationId ID of organization to retrieve
   * @returns Observable<OrganizationsResponse>
   */
  public getOrganization(organizationId: string): Observable<OrganizationsResponse> {
    console.debug('[OrganizationService] Getting organization:', organizationId);

    if (!organizationId) {
      throw new Error('Organization ID is required');
    }

    return from(
      this.query(
        OrganizationsQueryByOrganizationId,
        { 
          input: {
            organizationId: organizationId
          }
        },
        'userPool' // Use userPool auth for authenticated operations
      ) as Promise<GraphQLResult<OrganizationsQueryByOrganizationIdResponse>>
    ).pipe(
      map(response => {
        console.debug('[OrganizationService] Get organization response:', response);
        
        if (!response.data) {
          throw new Error('No data in get organization response');
        }

        const queryData = response.data.OrganizationsQueryByOrganizationId;
        return {
          StatusCode: queryData?.StatusCode ?? 200,
          Message: queryData?.Message ?? 'Organization retrieved successfully',
          Data: queryData?.Data ? new Organizations(queryData.Data) : null
        } as OrganizationsResponse;
      }),
      catchError((error) => {
        console.error('[OrganizationService] Error getting organization:', error);
        
        if (error?.message?.includes('Not Authorized') || error?.message?.includes('Unauthorized')) {
          throw new Error('You are not authorized to view this organization.');
        }
        
        if (error?.message?.includes('not found')) {
          throw new Error('Organization not found.');
        }
        
        throw new Error('Failed to retrieve organization. Please try again later.');
      })
    );
  }
}