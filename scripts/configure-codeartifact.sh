#!/bin/bash
# Configure local development environment to use CodeArtifact

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
REGION=${AWS_REGION:-us-east-1}
ENVIRONMENT=${ENVIRONMENT:-dev}
CUSTOMER_ID=${CUSTOMER_ID:-orb}
PROJECT_ID=${PROJECT_ID:-integration-hub}

echo -e "${GREEN}Configuring CodeArtifact for local development${NC}"
echo "Environment: $ENVIRONMENT"
echo "Region: $REGION"

# Get CodeArtifact configuration from SSM parameters
echo -e "${YELLOW}Fetching CodeArtifact configuration...${NC}"

DOMAIN=$(aws ssm get-parameter \
    --name "/${CUSTOMER_ID}/${PROJECT_ID}/${ENVIRONMENT}/codeartifact/domain" \
    --query 'Parameter.Value' \
    --output text \
    --region $REGION 2>/dev/null) || {
    echo -e "${RED}Failed to get CodeArtifact domain. Is the stack deployed?${NC}"
    exit 1
}

REPOSITORY=$(aws ssm get-parameter \
    --name "/${CUSTOMER_ID}/${PROJECT_ID}/${ENVIRONMENT}/codeartifact/repository" \
    --query 'Parameter.Value' \
    --output text \
    --region $REGION)

echo "Domain: $DOMAIN"
echo "Repository: $REPOSITORY"

# Get authorization token
echo -e "${YELLOW}Getting authorization token...${NC}"
AUTH_TOKEN=$(aws codeartifact get-authorization-token \
    --domain $DOMAIN \
    --query authorizationToken \
    --output text \
    --region $REGION)

if [ -z "$AUTH_TOKEN" ]; then
    echo -e "${RED}Failed to get authorization token${NC}"
    exit 1
fi

# Get repository endpoint
REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint \
    --domain $DOMAIN \
    --repository $REPOSITORY \
    --format pypi \
    --query repositoryEndpoint \
    --output text \
    --region $REGION)

echo "Repository endpoint: $REPOSITORY_ENDPOINT"

# Configure pip
echo -e "${YELLOW}Configuring pip...${NC}"
pip config set global.index-url "https://aws:${AUTH_TOKEN}@${REPOSITORY_ENDPOINT#https://}simple/"

# Configure pipenv
echo -e "${YELLOW}Configuring pipenv...${NC}"
export PIP_INDEX_URL="https://aws:${AUTH_TOKEN}@${REPOSITORY_ENDPOINT#https://}simple/"

# Create/update .env file for the project
ENV_FILE=".env.codeartifact"
echo -e "${YELLOW}Creating $ENV_FILE...${NC}"
cat > $ENV_FILE << EOF
# CodeArtifact Configuration
# Generated by configure-codeartifact.sh on $(date)
# This token expires in 12 hours

export CODEARTIFACT_DOMAIN="$DOMAIN"
export CODEARTIFACT_REPOSITORY="$REPOSITORY"
export CODEARTIFACT_AUTH_TOKEN="$AUTH_TOKEN"
export CODEARTIFACT_REPOSITORY_URL="$REPOSITORY_ENDPOINT"
export PIP_INDEX_URL="https://aws:${AUTH_TOKEN}@${REPOSITORY_ENDPOINT#https://}simple/"

# For twine uploads
export TWINE_USERNAME="aws"
export TWINE_PASSWORD="$AUTH_TOKEN"
export TWINE_REPOSITORY_URL="$REPOSITORY_ENDPOINT"
EOF

echo -e "${GREEN}Configuration complete!${NC}"
echo ""
echo "To use CodeArtifact in your current shell session:"
echo -e "${YELLOW}source $ENV_FILE${NC}"
echo ""
echo "To publish a package:"
echo -e "${YELLOW}cd backend/packages/orb-common${NC}"
echo -e "${YELLOW}python -m build${NC}"
echo -e "${YELLOW}twine upload dist/*${NC}"
echo ""
echo "To install packages:"
echo -e "${YELLOW}pipenv install orb-common${NC}"
echo ""
echo -e "${RED}Note: The auth token expires in 12 hours. Re-run this script to refresh.${NC}"

# Optionally source the file immediately
read -p "Source the environment file now? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    source $ENV_FILE
    echo -e "${GREEN}Environment variables loaded!${NC}"
fi